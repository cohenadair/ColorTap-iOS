// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars,subtype_of_sealed_class,unnecessary_overrides,must_be_immutable,duplicate_ignore,invalid_implementation_override,deprecated_member_use
// Mocks generated by Mockito 5.4.4 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;
import 'dart:ui' as _i5;

import 'package:flame/cache.dart' as _i6;
import 'package:flame/collisions.dart' as _i12;
import 'package:flame/components.dart' as _i3;
import 'package:flame/game.dart' as _i4;
import 'package:flame/src/components/core/component_tree_root.dart' as _i16;
import 'package:flame/src/game/game_render_box.dart' as _i9;
import 'package:flame/src/game/game_widget/gesture_detector_builder.dart'
    as _i7;
import 'package:flame/src/game/overlay_manager.dart' as _i8;
import 'package:flutter/gestures.dart' as _i15;
import 'package:flutter/material.dart' as _i10;
import 'package:flutter/rendering.dart' as _i17;
import 'package:mobile/color_tap_game.dart' as _i13;
import 'package:mobile/color_tap_world.dart' as _i2;
import 'package:mobile/components/target.dart' as _i18;
import 'package:mobile/components/target_board.dart' as _i19;
import 'package:mobile/target_color.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeColorTapWorld_0 extends _i1.SmartFake implements _i2.ColorTapWorld {
  _FakeColorTapWorld_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraComponent_1 extends _i1.SmartFake
    implements _i3.CameraComponent {
  _FakeCameraComponent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVector2_2 extends _i1.SmartFake implements _i4.Vector2 {
  _FakeVector2_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_3 extends _i1.SmartFake implements _i5.Color {
  _FakeColor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComponentSet_4 extends _i1.SmartFake implements _i3.ComponentSet {
  _FakeComponentSet_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePaint_5 extends _i1.SmartFake implements _i5.Paint {
  _FakePaint_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextPaint_6 extends _i1.SmartFake implements _i4.TextPaint {
  _FakeTextPaint_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImages_7 extends _i1.SmartFake implements _i6.Images {
  _FakeImages_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssetsCache_8 extends _i1.SmartFake implements _i6.AssetsCache {
  _FakeAssetsCache_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGestureDetectorBuilder_9 extends _i1.SmartFake
    implements _i7.GestureDetectorBuilder {
  _FakeGestureDetectorBuilder_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOverlayManager_10 extends _i1.SmartFake
    implements _i8.OverlayManager {
  _FakeOverlayManager_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGameRenderBox_11 extends _i1.SmartFake implements _i9.GameRenderBox {
  _FakeGameRenderBox_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeMouseCursor_12 extends _i1.SmartFake implements _i10.MouseCursor {
  _FakeMouseCursor_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeComponentsNotifier_13<T1 extends _i3.Component> extends _i1.SmartFake
    implements _i3.ComponentsNotifier<T1> {
  _FakeComponentsNotifier_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSprite_14 extends _i1.SmartFake implements _i3.Sprite {
  _FakeSprite_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSpriteAnimation_15 extends _i1.SmartFake
    implements _i3.SpriteAnimation {
  _FakeSpriteAnimation_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTargetColor_16 extends _i1.SmartFake implements _i11.TargetColor {
  _FakeTargetColor_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlameGame_17<W extends _i3.World> extends _i1.SmartFake
    implements _i4.FlameGame<W> {
  _FakeFlameGame_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollisionDetection_18<T extends _i12.Hitbox<T>,
        B extends _i12.Broadphase<T>> extends _i1.SmartFake
    implements _i12.CollisionDetection<T, B> {
  _FakeCollisionDetection_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ColorTapGame].
///
/// See the documentation for Mockito's code generation for more information.
class MockColorTapGame extends _i1.Mock implements _i13.ColorTapGame {
  MockColorTapGame() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.ComponentsNotifier<_i3.Component>> get notifiers =>
      (super.noSuchMethod(
        Invocation.getter(#notifiers),
        returnValue: <_i3.ComponentsNotifier<_i3.Component>>[],
      ) as List<_i3.ComponentsNotifier<_i3.Component>>);

  @override
  bool get pauseWhenBackgrounded => (super.noSuchMethod(
        Invocation.getter(#pauseWhenBackgrounded),
        returnValue: false,
      ) as bool);

  @override
  set pauseWhenBackgrounded(bool? _pauseWhenBackgrounded) => super.noSuchMethod(
        Invocation.setter(
          #pauseWhenBackgrounded,
          _pauseWhenBackgrounded,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ColorTapWorld get world => (super.noSuchMethod(
        Invocation.getter(#world),
        returnValue: _FakeColorTapWorld_0(
          this,
          Invocation.getter(#world),
        ),
      ) as _i2.ColorTapWorld);

  @override
  set world(_i2.ColorTapWorld? newWorld) => super.noSuchMethod(
        Invocation.setter(
          #world,
          newWorld,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.CameraComponent get camera => (super.noSuchMethod(
        Invocation.getter(#camera),
        returnValue: _FakeCameraComponent_1(
          this,
          Invocation.getter(#camera),
        ),
      ) as _i3.CameraComponent);

  @override
  set camera(_i3.CameraComponent? newCameraComponent) => super.noSuchMethod(
        Invocation.setter(
          #camera,
          newCameraComponent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Vector2 get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeVector2_2(
          this,
          Invocation.getter(#size),
        ),
      ) as _i4.Vector2);

  @override
  bool get hasLifecycleEvents => (super.noSuchMethod(
        Invocation.getter(#hasLifecycleEvents),
        returnValue: false,
      ) as bool);

  @override
  bool get debugMode => (super.noSuchMethod(
        Invocation.getter(#debugMode),
        returnValue: false,
      ) as bool);

  @override
  set debugMode(bool? _debugMode) => super.noSuchMethod(
        Invocation.setter(
          #debugMode,
          _debugMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugCoordinatesPrecision(int? _debugCoordinatesPrecision) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCoordinatesPrecision,
          _debugCoordinatesPrecision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Color get debugColor => (super.noSuchMethod(
        Invocation.getter(#debugColor),
        returnValue: _FakeColor_3(
          this,
          Invocation.getter(#debugColor),
        ),
      ) as _i5.Color);

  @override
  set debugColor(_i5.Color? _debugColor) => super.noSuchMethod(
        Invocation.setter(
          #debugColor,
          _debugColor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounting => (super.noSuchMethod(
        Invocation.getter(#isMounting),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounted => (super.noSuchMethod(
        Invocation.getter(#isMounted),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoving => (super.noSuchMethod(
        Invocation.getter(#isRemoving),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoved => (super.noSuchMethod(
        Invocation.getter(#isRemoved),
        returnValue: false,
      ) as bool);

  @override
  _i14.Future<void> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  _i14.Future<void> get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  _i14.Future<void> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  set parent(_i3.Component? newParent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          newParent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ComponentSet get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeComponentSet_4(
          this,
          Invocation.getter(#children),
        ),
      ) as _i3.ComponentSet);

  @override
  bool get hasChildren => (super.noSuchMethod(
        Invocation.getter(#hasChildren),
        returnValue: false,
      ) as bool);

  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
      ) as int);

  @override
  set priority(int? newPriority) => super.noSuchMethod(
        Invocation.setter(
          #priority,
          newPriority,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Paint get debugPaint => (super.noSuchMethod(
        Invocation.getter(#debugPaint),
        returnValue: _FakePaint_5(
          this,
          Invocation.getter(#debugPaint),
        ),
      ) as _i5.Paint);

  @override
  _i4.TextPaint get debugTextPaint => (super.noSuchMethod(
        Invocation.getter(#debugTextPaint),
        returnValue: _FakeTextPaint_6(
          this,
          Invocation.getter(#debugTextPaint),
        ),
      ) as _i4.TextPaint);

  @override
  _i6.Images get images => (super.noSuchMethod(
        Invocation.getter(#images),
        returnValue: _FakeImages_7(
          this,
          Invocation.getter(#images),
        ),
      ) as _i6.Images);

  @override
  set images(_i6.Images? _images) => super.noSuchMethod(
        Invocation.setter(
          #images,
          _images,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.AssetsCache get assets => (super.noSuchMethod(
        Invocation.getter(#assets),
        returnValue: _FakeAssetsCache_8(
          this,
          Invocation.getter(#assets),
        ),
      ) as _i6.AssetsCache);

  @override
  set assets(_i6.AssetsCache? _assets) => super.noSuchMethod(
        Invocation.setter(
          #assets,
          _assets,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.GestureDetectorBuilder get gestureDetectors => (super.noSuchMethod(
        Invocation.getter(#gestureDetectors),
        returnValue: _FakeGestureDetectorBuilder_9(
          this,
          Invocation.getter(#gestureDetectors),
        ),
      ) as _i7.GestureDetectorBuilder);

  @override
  _i8.OverlayManager get overlays => (super.noSuchMethod(
        Invocation.getter(#overlays),
        returnValue: _FakeOverlayManager_10(
          this,
          Invocation.getter(#overlays),
        ),
      ) as _i8.OverlayManager);

  @override
  List<_i5.VoidCallback> get gameStateListeners => (super.noSuchMethod(
        Invocation.getter(#gameStateListeners),
        returnValue: <_i5.VoidCallback>[],
      ) as List<_i5.VoidCallback>);

  @override
  set mouseDetector(void Function(_i15.PointerHoverEvent)? newMouseDetector) =>
      super.noSuchMethod(
        Invocation.setter(
          #mouseDetector,
          newMouseDetector,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.GameRenderBox get renderBox => (super.noSuchMethod(
        Invocation.getter(#renderBox),
        returnValue: _FakeGameRenderBox_11(
          this,
          Invocation.getter(#renderBox),
        ),
      ) as _i9.GameRenderBox);

  @override
  bool get isAttached => (super.noSuchMethod(
        Invocation.getter(#isAttached),
        returnValue: false,
      ) as bool);

  @override
  _i4.Vector2 get canvasSize => (super.noSuchMethod(
        Invocation.getter(#canvasSize),
        returnValue: _FakeVector2_2(
          this,
          Invocation.getter(#canvasSize),
        ),
      ) as _i4.Vector2);

  @override
  bool get hasLayout => (super.noSuchMethod(
        Invocation.getter(#hasLayout),
        returnValue: false,
      ) as bool);

  @override
  bool get paused => (super.noSuchMethod(
        Invocation.getter(#paused),
        returnValue: false,
      ) as bool);

  @override
  set paused(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #paused,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.MouseCursor get mouseCursor => (super.noSuchMethod(
        Invocation.getter(#mouseCursor),
        returnValue: _FakeMouseCursor_12(
          this,
          Invocation.getter(#mouseCursor),
        ),
      ) as _i10.MouseCursor);

  @override
  set mouseCursor(_i10.MouseCursor? value) => super.noSuchMethod(
        Invocation.setter(
          #mouseCursor,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Color backgroundColor() => (super.noSuchMethod(
        Invocation.method(
          #backgroundColor,
          [],
        ),
        returnValue: _FakeColor_3(
          this,
          Invocation.method(
            #backgroundColor,
            [],
          ),
        ),
      ) as _i5.Color);

  @override
  void onLoad() => super.noSuchMethod(
        Invocation.method(
          #onLoad,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void mount() => super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(_i5.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderTree(_i5.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderTree,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update(double? dt) => super.noSuchMethod(
        Invocation.method(
          #update,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTree(double? dt) => super.noSuchMethod(
        Invocation.method(
          #updateTree,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onGameResize(_i4.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #onGameResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Future<void> ready() => (super.noSuchMethod(
        Invocation.method(
          #ready,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  bool containsLocalPoint(_i4.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsLocalPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  double currentTime() => (super.noSuchMethod(
        Invocation.method(
          #currentTime,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i3.ComponentsNotifier<T> componentsNotifier<T extends _i3.Component>() =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsNotifier,
          [],
        ),
        returnValue: _FakeComponentsNotifier_13<T>(
          this,
          Invocation.method(
            #componentsNotifier,
            [],
          ),
        ),
      ) as _i3.ComponentsNotifier<T>);

  @override
  void propagateToApplicableNotifiers(
    _i3.Component? component,
    void Function(_i3.ComponentsNotifier<_i3.Component>)? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #propagateToApplicableNotifiers,
          [
            component,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void lifecycleStateChange(_i5.AppLifecycleState? state) => super.noSuchMethod(
        Invocation.method(
          #lifecycleStateChange,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseEngine() => super.noSuchMethod(
        Invocation.method(
          #pauseEngine,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resumeEngine() => super.noSuchMethod(
        Invocation.method(
          #resumeEngine,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueAdd(
    _i3.Component? child,
    _i3.Component? parent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #enqueueAdd,
          [
            child,
            parent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dequeueAdd(
    _i3.Component? child,
    _i3.Component? parent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #dequeueAdd,
          [
            child,
            parent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueRemove(
    _i3.Component? child,
    _i3.Component? parent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #enqueueRemove,
          [
            child,
            parent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dequeueRemove(_i3.Component? child) => super.noSuchMethod(
        Invocation.method(
          #dequeueRemove,
          [child],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueMove(
    _i3.Component? child,
    _i3.Component? newParent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #enqueueMove,
          [
            child,
            newParent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueRebalance(_i3.Component? parent) => super.noSuchMethod(
        Invocation.method(
          #enqueueRebalance,
          [parent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void processLifecycleEvents() => super.noSuchMethod(
        Invocation.method(
          #processLifecycleEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void processRebalanceEvents() => super.noSuchMethod(
        Invocation.method(
          #processRebalanceEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleResize(_i4.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #handleResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerKey(
    _i3.ComponentKey? key,
    _i3.Component? component,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerKey,
          [
            key,
            component,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterKey(_i3.ComponentKey? key) => super.noSuchMethod(
        Invocation.method(
          #unregisterKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T? findByKey<T extends _i3.Component>(_i3.ComponentKey? key) =>
      (super.noSuchMethod(Invocation.method(
        #findByKey,
        [key],
      )) as T?);

  @override
  T? findByKeyName<T extends _i3.Component>(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #findByKeyName,
        [name],
      )) as T?);

  @override
  _i3.ComponentSet createComponentSet() => (super.noSuchMethod(
        Invocation.method(
          #createComponentSet,
          [],
        ),
        returnValue: _FakeComponentSet_4(
          this,
          Invocation.method(
            #createComponentSet,
            [],
          ),
        ),
      ) as _i3.ComponentSet);

  @override
  T? findParent<T extends _i3.Component>({bool? includeSelf = false}) =>
      (super.noSuchMethod(Invocation.method(
        #findParent,
        [],
        {#includeSelf: includeSelf},
      )) as T?);

  @override
  Iterable<_i3.Component> ancestors({bool? includeSelf = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #ancestors,
          [],
          {#includeSelf: includeSelf},
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  Iterable<_i3.Component> descendants({
    bool? includeSelf = false,
    bool? reversed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #descendants,
          [],
          {
            #includeSelf: includeSelf,
            #reversed: reversed,
          },
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  bool propagateToChildren<T extends _i3.Component>(
    bool Function(T)? handler, {
    bool? includeSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #propagateToChildren,
          [handler],
          {#includeSelf: includeSelf},
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(_i3.Component? c) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [c],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onMount() => super.noSuchMethod(
        Invocation.method(
          #onMount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemove() => super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onParentResize(_i4.Vector2? maxSize) => super.noSuchMethod(
        Invocation.method(
          #onParentResize,
          [maxSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChildrenChanged(
    _i3.Component? child,
    _i3.ChildrenChangeType? type,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChildrenChanged,
          [
            child,
            type,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.FutureOr<void> add(_i3.Component? component) =>
      (super.noSuchMethod(Invocation.method(
        #add,
        [component],
      )) as _i14.FutureOr<void>);

  @override
  _i14.FutureOr<void> addToParent(_i3.Component? parent) =>
      (super.noSuchMethod(Invocation.method(
        #addToParent,
        [parent],
      )) as _i14.FutureOr<void>);

  @override
  _i14.Future<void> addAll(Iterable<_i3.Component>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [components],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  void remove(_i3.Component? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromParent() => super.noSuchMethod(
        Invocation.method(
          #removeFromParent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(Iterable<_i3.Component>? components) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [components],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i3.Component)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsPoint(_i4.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i3.Component> componentsAtPoint(
    _i4.Vector2? point, [
    List<_i4.Vector2>? nestedPoints,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtPoint,
          [
            point,
            nestedPoints,
          ],
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  Iterable<_i3.Component> componentsAtLocation<T>(
    T? locationContext,
    List<T>? nestedContexts,
    T? Function(
      _i3.CoordinateTransform,
      T,
    )? transformContext,
    bool Function(
      _i3.Component,
      T,
    )? checkContains,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtLocation,
          [
            locationContext,
            nestedContexts,
            transformContext,
            checkContains,
          ],
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  _i16.LifecycleEventStatus handleLifecycleEventAdd(_i3.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventAdd,
          [parent],
        ),
        returnValue: _i16.LifecycleEventStatus.skip,
      ) as _i16.LifecycleEventStatus);

  @override
  _i16.LifecycleEventStatus handleLifecycleEventRemove(_i3.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventRemove,
          [parent],
        ),
        returnValue: _i16.LifecycleEventStatus.skip,
      ) as _i16.LifecycleEventStatus);

  @override
  _i16.LifecycleEventStatus handleLifecycleEventMove(
          _i3.Component? newParent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventMove,
          [newParent],
        ),
        returnValue: _i16.LifecycleEventStatus.skip,
      ) as _i16.LifecycleEventStatus);

  @override
  void setMounted() => super.noSuchMethod(
        Invocation.method(
          #setMounted,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderDebugMode(_i5.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderDebugMode,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void assertHasLayout() => super.noSuchMethod(
        Invocation.method(
          #assertHasLayout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void attach(
    _i17.PipelineOwner? owner,
    _i9.GameRenderBox? gameRenderBox,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #attach,
          [
            owner,
            gameRenderBox,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAttach() => super.noSuchMethod(
        Invocation.method(
          #onAttach,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void detach() => super.noSuchMethod(
        Invocation.method(
          #detach,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDetach() => super.noSuchMethod(
        Invocation.method(
          #onDetach,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Vector2 convertGlobalToLocalCoordinate(_i4.Vector2? point) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertGlobalToLocalCoordinate,
          [point],
        ),
        returnValue: _FakeVector2_2(
          this,
          Invocation.method(
            #convertGlobalToLocalCoordinate,
            [point],
          ),
        ),
      ) as _i4.Vector2);

  @override
  _i4.Vector2 convertLocalToGlobalCoordinate(_i4.Vector2? point) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertLocalToGlobalCoordinate,
          [point],
        ),
        returnValue: _FakeVector2_2(
          this,
          Invocation.method(
            #convertLocalToGlobalCoordinate,
            [point],
          ),
        ),
      ) as _i4.Vector2);

  @override
  _i14.Future<_i3.Sprite> loadSprite(
    String? path, {
    _i4.Vector2? srcSize,
    _i4.Vector2? srcPosition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSprite,
          [path],
          {
            #srcSize: srcSize,
            #srcPosition: srcPosition,
          },
        ),
        returnValue: _i14.Future<_i3.Sprite>.value(_FakeSprite_14(
          this,
          Invocation.method(
            #loadSprite,
            [path],
            {
              #srcSize: srcSize,
              #srcPosition: srcPosition,
            },
          ),
        )),
      ) as _i14.Future<_i3.Sprite>);

  @override
  _i14.Future<_i3.SpriteAnimation> loadSpriteAnimation(
    String? path,
    _i3.SpriteAnimationData? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSpriteAnimation,
          [
            path,
            data,
          ],
        ),
        returnValue:
            _i14.Future<_i3.SpriteAnimation>.value(_FakeSpriteAnimation_15(
          this,
          Invocation.method(
            #loadSpriteAnimation,
            [
              path,
              data,
            ],
          ),
        )),
      ) as _i14.Future<_i3.SpriteAnimation>);

  @override
  void stepEngine({double? stepTime = 0.016666666666666666}) =>
      super.noSuchMethod(
        Invocation.method(
          #stepEngine,
          [],
          {#stepTime: stepTime},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addGameStateListener(_i5.VoidCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #addGameStateListener,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeGameStateListener(_i5.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #removeGameStateListener,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshWidget({bool? isInternalRefresh = true}) => super.noSuchMethod(
        Invocation.method(
          #refreshWidget,
          [],
          {#isInternalRefresh: isInternalRefresh},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ColorTapWorld].
///
/// See the documentation for Mockito's code generation for more information.
class MockColorTapWorld extends _i1.Mock implements _i2.ColorTapWorld {
  MockColorTapWorld() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get speed => (super.noSuchMethod(
        Invocation.getter(#speed),
        returnValue: 0.0,
      ) as double);

  @override
  set speed(double? _speed) => super.noSuchMethod(
        Invocation.setter(
          #speed,
          _speed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.TargetColor get color => (super.noSuchMethod(
        Invocation.getter(#color),
        returnValue: _FakeTargetColor_16(
          this,
          Invocation.getter(#color),
        ),
      ) as _i11.TargetColor);

  @override
  set color(_i11.TargetColor? _color) => super.noSuchMethod(
        Invocation.setter(
          #color,
          _color,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get score => (super.noSuchMethod(
        Invocation.getter(#score),
        returnValue: 0,
      ) as int);

  @override
  set score(int? _score) => super.noSuchMethod(
        Invocation.setter(
          #score,
          _score,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get scrollingPaused => (super.noSuchMethod(
        Invocation.getter(#scrollingPaused),
        returnValue: false,
      ) as bool);

  @override
  set scrollingPaused(bool? _scrollingPaused) => super.noSuchMethod(
        Invocation.setter(
          #scrollingPaused,
          _scrollingPaused,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set gracePeriod(int? _gracePeriod) => super.noSuchMethod(
        Invocation.setter(
          #gracePeriod,
          _gracePeriod,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get debugMode => (super.noSuchMethod(
        Invocation.getter(#debugMode),
        returnValue: false,
      ) as bool);

  @override
  set debugMode(bool? _debugMode) => super.noSuchMethod(
        Invocation.setter(
          #debugMode,
          _debugMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugCoordinatesPrecision(int? _debugCoordinatesPrecision) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCoordinatesPrecision,
          _debugCoordinatesPrecision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Color get debugColor => (super.noSuchMethod(
        Invocation.getter(#debugColor),
        returnValue: _FakeColor_3(
          this,
          Invocation.getter(#debugColor),
        ),
      ) as _i5.Color);

  @override
  set debugColor(_i5.Color? _debugColor) => super.noSuchMethod(
        Invocation.setter(
          #debugColor,
          _debugColor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounting => (super.noSuchMethod(
        Invocation.getter(#isMounting),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounted => (super.noSuchMethod(
        Invocation.getter(#isMounted),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoving => (super.noSuchMethod(
        Invocation.getter(#isRemoving),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoved => (super.noSuchMethod(
        Invocation.getter(#isRemoved),
        returnValue: false,
      ) as bool);

  @override
  _i14.Future<void> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  _i14.Future<void> get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  _i14.Future<void> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  set parent(_i3.Component? newParent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          newParent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ComponentSet get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeComponentSet_4(
          this,
          Invocation.getter(#children),
        ),
      ) as _i3.ComponentSet);

  @override
  bool get hasChildren => (super.noSuchMethod(
        Invocation.getter(#hasChildren),
        returnValue: false,
      ) as bool);

  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
      ) as int);

  @override
  set priority(int? newPriority) => super.noSuchMethod(
        Invocation.setter(
          #priority,
          newPriority,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Paint get debugPaint => (super.noSuchMethod(
        Invocation.getter(#debugPaint),
        returnValue: _FakePaint_5(
          this,
          Invocation.getter(#debugPaint),
        ),
      ) as _i5.Paint);

  @override
  _i4.TextPaint get debugTextPaint => (super.noSuchMethod(
        Invocation.getter(#debugTextPaint),
        returnValue: _FakeTextPaint_6(
          this,
          Invocation.getter(#debugTextPaint),
        ),
      ) as _i4.TextPaint);

  @override
  _i4.FlameGame<_i3.World> get game => (super.noSuchMethod(
        Invocation.getter(#game),
        returnValue: _FakeFlameGame_17<_i3.World>(
          this,
          Invocation.getter(#game),
        ),
      ) as _i4.FlameGame<_i3.World>);

  @override
  set game(_i4.FlameGame<_i3.World>? value) => super.noSuchMethod(
        Invocation.setter(
          #game,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FlameGame<_i3.World> get gameRef => (super.noSuchMethod(
        Invocation.getter(#gameRef),
        returnValue: _FakeFlameGame_17<_i3.World>(
          this,
          Invocation.getter(#gameRef),
        ),
      ) as _i4.FlameGame<_i3.World>);

  @override
  _i12.CollisionDetection<_i12.ShapeHitbox, _i12.Broadphase<_i12.ShapeHitbox>>
      get collisionDetection => (super.noSuchMethod(
            Invocation.getter(#collisionDetection),
            returnValue: _FakeCollisionDetection_18<_i12.ShapeHitbox,
                _i12.Broadphase<_i12.ShapeHitbox>>(
              this,
              Invocation.getter(#collisionDetection),
            ),
          ) as _i12.CollisionDetection<_i12.ShapeHitbox,
              _i12.Broadphase<_i12.ShapeHitbox>>);

  @override
  set collisionDetection(
          _i12.CollisionDetection<_i12.ShapeHitbox,
                  _i12.Broadphase<_i12.ShapeHitbox>>?
              cd) =>
      super.noSuchMethod(
        Invocation.setter(
          #collisionDetection,
          cd,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLoad() => super.noSuchMethod(
        Invocation.method(
          #onLoad,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleTargetHit({required bool? isCorrect}) => super.noSuchMethod(
        Invocation.method(
          #handleTargetHit,
          [],
          {#isCorrect: isCorrect},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleTargetMissed(
    _i18.Target? target,
    _i19.TargetBoard? board,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleTargetMissed,
          [
            target,
            board,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void play() => super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderTree(_i5.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderTree,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderFromCamera(_i5.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderFromCamera,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsLocalPoint(_i4.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsLocalPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Vector2? localToParent(_i4.Vector2? point) =>
      (super.noSuchMethod(Invocation.method(
        #localToParent,
        [point],
      )) as _i4.Vector2?);

  @override
  _i4.Vector2? parentToLocal(_i4.Vector2? point) =>
      (super.noSuchMethod(Invocation.method(
        #parentToLocal,
        [point],
      )) as _i4.Vector2?);

  @override
  _i3.ComponentSet createComponentSet() => (super.noSuchMethod(
        Invocation.method(
          #createComponentSet,
          [],
        ),
        returnValue: _FakeComponentSet_4(
          this,
          Invocation.method(
            #createComponentSet,
            [],
          ),
        ),
      ) as _i3.ComponentSet);

  @override
  T? findParent<T extends _i3.Component>({bool? includeSelf = false}) =>
      (super.noSuchMethod(Invocation.method(
        #findParent,
        [],
        {#includeSelf: includeSelf},
      )) as T?);

  @override
  Iterable<_i3.Component> ancestors({bool? includeSelf = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #ancestors,
          [],
          {#includeSelf: includeSelf},
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  Iterable<_i3.Component> descendants({
    bool? includeSelf = false,
    bool? reversed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #descendants,
          [],
          {
            #includeSelf: includeSelf,
            #reversed: reversed,
          },
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  bool propagateToChildren<T extends _i3.Component>(
    bool Function(T)? handler, {
    bool? includeSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #propagateToChildren,
          [handler],
          {#includeSelf: includeSelf},
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(_i3.Component? c) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [c],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onGameResize(_i4.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #onGameResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMount() => super.noSuchMethod(
        Invocation.method(
          #onMount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemove() => super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onParentResize(_i4.Vector2? maxSize) => super.noSuchMethod(
        Invocation.method(
          #onParentResize,
          [maxSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update(double? dt) => super.noSuchMethod(
        Invocation.method(
          #update,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTree(double? dt) => super.noSuchMethod(
        Invocation.method(
          #updateTree,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChildrenChanged(
    _i3.Component? child,
    _i3.ChildrenChangeType? type,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChildrenChanged,
          [
            child,
            type,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(_i5.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.FutureOr<void> add(_i3.Component? component) =>
      (super.noSuchMethod(Invocation.method(
        #add,
        [component],
      )) as _i14.FutureOr<void>);

  @override
  _i14.FutureOr<void> addToParent(_i3.Component? parent) =>
      (super.noSuchMethod(Invocation.method(
        #addToParent,
        [parent],
      )) as _i14.FutureOr<void>);

  @override
  _i14.Future<void> addAll(Iterable<_i3.Component>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [components],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  void remove(_i3.Component? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromParent() => super.noSuchMethod(
        Invocation.method(
          #removeFromParent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(Iterable<_i3.Component>? components) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [components],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i3.Component)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsPoint(_i4.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i3.Component> componentsAtPoint(
    _i4.Vector2? point, [
    List<_i4.Vector2>? nestedPoints,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtPoint,
          [
            point,
            nestedPoints,
          ],
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  Iterable<_i3.Component> componentsAtLocation<T>(
    T? locationContext,
    List<T>? nestedContexts,
    T? Function(
      _i3.CoordinateTransform,
      T,
    )? transformContext,
    bool Function(
      _i3.Component,
      T,
    )? checkContains,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtLocation,
          [
            locationContext,
            nestedContexts,
            transformContext,
            checkContains,
          ],
        ),
        returnValue: <_i3.Component>[],
      ) as Iterable<_i3.Component>);

  @override
  _i16.LifecycleEventStatus handleLifecycleEventAdd(_i3.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventAdd,
          [parent],
        ),
        returnValue: _i16.LifecycleEventStatus.skip,
      ) as _i16.LifecycleEventStatus);

  @override
  _i16.LifecycleEventStatus handleLifecycleEventRemove(_i3.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventRemove,
          [parent],
        ),
        returnValue: _i16.LifecycleEventStatus.skip,
      ) as _i16.LifecycleEventStatus);

  @override
  _i16.LifecycleEventStatus handleLifecycleEventMove(
          _i3.Component? newParent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventMove,
          [newParent],
        ),
        returnValue: _i16.LifecycleEventStatus.skip,
      ) as _i16.LifecycleEventStatus);

  @override
  void handleResize(_i4.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #handleResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMounted() => super.noSuchMethod(
        Invocation.method(
          #setMounted,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderDebugMode(_i5.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderDebugMode,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
