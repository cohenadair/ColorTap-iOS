// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars,subtype_of_sealed_class,unnecessary_overrides,must_be_immutable,duplicate_ignore,invalid_implementation_override,deprecated_member_use
// Mocks generated by Mockito 5.4.4 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:collection' as _i25;
import 'dart:convert' as _i52;
import 'dart:isolate' as _i57;
import 'dart:typed_data' as _i34;
import 'dart:ui' as _i8;

import 'package:confetti/confetti.dart' as _i17;
import 'package:confetti/src/enums/confetti_controller_state.dart' as _i43;
import 'package:device_info_plus/device_info_plus.dart' as _i2;
import 'package:firebase_analytics/firebase_analytics.dart' as _i31;
import 'package:flame/cache.dart' as _i12;
import 'package:flame/camera.dart' as _i73;
import 'package:flame/components.dart' as _i10;
import 'package:flame/events.dart' as _i68;
import 'package:flame/game.dart' as _i11;
import 'package:flame/geometry.dart' as _i28;
import 'package:flame/src/components/core/component_tree_root.dart' as _i38;
import 'package:flame/src/effects/provider_interfaces.dart' as _i29;
import 'package:flame/src/events/messages/tap_cancel_event.dart' as _i70;
import 'package:flame/src/events/messages/tap_up_event.dart' as _i69;
import 'package:flame/src/game/game_render_box.dart' as _i15;
import 'package:flame/src/game/game_widget/gesture_detector_builder.dart'
    as _i13;
import 'package:flame/src/game/overlay_manager.dart' as _i14;
import 'package:flame/src/rendering/decorator.dart' as _i26;
import 'package:flame_audio/flame_audio.dart' as _i3;
import 'package:flutter/material.dart' as _i7;
import 'package:flutter/rendering.dart' as _i39;
import 'package:flutter/services.dart' as _i37;
import 'package:flutter_fgbg/flutter_fgbg.dart' as _i48;
import 'package:google_mobile_ads/google_mobile_ads.dart' as _i5;
import 'package:google_mobile_ads/src/ad_listeners.dart' as _i6;
import 'package:http/http.dart' as _i20;
import 'package:mobile/components/target.dart' as _i40;
import 'package:mobile/components/target_board.dart' as _i41;
import 'package:mobile/difficulty.dart' as _i24;
import 'package:mobile/managers/audio_manager.dart' as _i33;
import 'package:mobile/managers/lives_manager.dart' as _i54;
import 'package:mobile/managers/orientation_manager.dart' as _i55;
import 'package:mobile/managers/preference_manager.dart' as _i60;
import 'package:mobile/managers/properties_manager.dart' as _i61;
import 'package:mobile/managers/purchases_manager.dart' as _i62;
import 'package:mobile/managers/stats_manager.dart' as _i67;
import 'package:mobile/managers/time_manager.dart' as _i71;
import 'package:mobile/tapd_game.dart' as _i27;
import 'package:mobile/tapd_world.dart' as _i9;
import 'package:mobile/target_color.dart' as _i16;
import 'package:mobile/wrappers/analytics_wrapper.dart' as _i30;
import 'package:mobile/wrappers/banner_ad_wrapper.dart' as _i35;
import 'package:mobile/wrappers/confetti_wrapper.dart' as _i44;
import 'package:mobile/wrappers/connection_wrapper.dart' as _i42;
import 'package:mobile/wrappers/crashlytics_wrapper.dart' as _i36;
import 'package:mobile/wrappers/device_info_wrapper.dart' as _i46;
import 'package:mobile/wrappers/fgbg_wrapper.dart' as _i47;
import 'package:mobile/wrappers/flame_audio_wrapper.dart' as _i50;
import 'package:mobile/wrappers/flame_wrapper.dart' as _i49;
import 'package:mobile/wrappers/http_wrapper.dart' as _i51;
import 'package:mobile/wrappers/in_app_review_wrapper.dart' as _i53;
import 'package:mobile/wrappers/package_info_wrapper.dart' as _i56;
import 'package:mobile/wrappers/platform_dispatcher_wrapper.dart' as _i58;
import 'package:mobile/wrappers/platform_wrapper.dart' as _i59;
import 'package:mobile/wrappers/purchases_wrapper.dart' as _i63;
import 'package:mobile/wrappers/rewarded_ad_wrapper.dart' as _i65;
import 'package:mobile/wrappers/url_launcher_wrapper.dart' as _i72;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i32;
import 'package:package_info_plus/package_info_plus.dart' as _i23;
import 'package:purchases_flutter/models/entitlement_infos_wrapper.dart'
    as _i18;
import 'package:purchases_flutter/models/offering_wrapper.dart' as _i21;
import 'package:purchases_flutter/models/package_wrapper.dart' as _i22;
import 'package:purchases_flutter/models/store_transaction.dart' as _i45;
import 'package:purchases_flutter/object_wrappers.dart' as _i19;
import 'package:purchases_flutter/purchases_flutter.dart' as _i64;
import 'package:shared_preferences/shared_preferences.dart' as _i66;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAndroidBuildVersion_0 extends _i1.SmartFake
    implements _i2.AndroidBuildVersion {
  _FakeAndroidBuildVersion_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioCache_1 extends _i1.SmartFake implements _i3.AudioCache {
  _FakeAudioCache_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompleter_2<T> extends _i1.SmartFake implements _i4.Completer<T> {
  _FakeCompleter_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSource_3 extends _i1.SmartFake implements _i3.Source {
  _FakeSource_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAdRequest_4 extends _i1.SmartFake implements _i5.AdRequest {
  _FakeAdRequest_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAdSize_5 extends _i1.SmartFake implements _i5.AdSize {
  _FakeAdSize_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBannerAdListener_6 extends _i1.SmartFake
    implements _i6.BannerAdListener {
  _FakeBannerAdListener_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBannerAd_7 extends _i1.SmartFake implements _i5.BannerAd {
  _FakeBannerAd_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_8 extends _i1.SmartFake implements _i7.Widget {
  _FakeWidget_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeRect_9 extends _i1.SmartFake implements _i8.Rect {
  _FakeRect_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTapdWorld_10 extends _i1.SmartFake implements _i9.TapdWorld {
  _FakeTapdWorld_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraComponent_11 extends _i1.SmartFake
    implements _i10.CameraComponent {
  _FakeCameraComponent_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVector2_12 extends _i1.SmartFake implements _i11.Vector2 {
  _FakeVector2_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_13 extends _i1.SmartFake implements _i8.Color {
  _FakeColor_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComponentSet_14 extends _i1.SmartFake implements _i10.ComponentSet {
  _FakeComponentSet_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextPaint_15 extends _i1.SmartFake implements _i11.TextPaint {
  _FakeTextPaint_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImages_16 extends _i1.SmartFake implements _i12.Images {
  _FakeImages_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssetsCache_17 extends _i1.SmartFake implements _i12.AssetsCache {
  _FakeAssetsCache_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGestureDetectorBuilder_18 extends _i1.SmartFake
    implements _i13.GestureDetectorBuilder {
  _FakeGestureDetectorBuilder_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOverlayManager_19 extends _i1.SmartFake
    implements _i14.OverlayManager {
  _FakeOverlayManager_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGameRenderBox_20 extends _i1.SmartFake
    implements _i15.GameRenderBox {
  _FakeGameRenderBox_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeMouseCursor_21 extends _i1.SmartFake implements _i7.MouseCursor {
  _FakeMouseCursor_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeComponentsNotifier_22<T1 extends _i10.Component>
    extends _i1.SmartFake implements _i10.ComponentsNotifier<T1> {
  _FakeComponentsNotifier_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSprite_23 extends _i1.SmartFake implements _i10.Sprite {
  _FakeSprite_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSpriteAnimation_24 extends _i1.SmartFake
    implements _i10.SpriteAnimation {
  _FakeSpriteAnimation_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTargetColor_25 extends _i1.SmartFake implements _i16.TargetColor {
  _FakeTargetColor_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlameGame_26<W extends _i10.World> extends _i1.SmartFake
    implements _i11.FlameGame<W> {
  _FakeFlameGame_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_27 extends _i1.SmartFake implements Duration {
  _FakeDuration_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfettiController_28 extends _i1.SmartFake
    implements _i17.ConfettiController {
  _FakeConfettiController_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEntitlementInfos_29 extends _i1.SmartFake
    implements _i18.EntitlementInfos {
  _FakeEntitlementInfos_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$CustomerInfoCopyWith_30<$Res> extends _i1.SmartFake
    implements _i19.$CustomerInfoCopyWith<$Res> {
  _Fake$CustomerInfoCopyWith_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidDeviceInfo_31 extends _i1.SmartFake
    implements _i2.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_31(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosDeviceInfo_32 extends _i1.SmartFake implements _i2.IosDeviceInfo {
  _FakeIosDeviceInfo_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioPlayer_33 extends _i1.SmartFake implements _i3.AudioPlayer {
  _FakeAudioPlayer_33(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioPool_34 extends _i1.SmartFake implements _i3.AudioPool {
  _FakeAudioPool_34(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlatformDispatcher_35 extends _i1.SmartFake
    implements _i8.PlatformDispatcher {
  _FakePlatformDispatcher_35(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDisplay_36 extends _i1.SmartFake implements _i8.Display {
  _FakeDisplay_36(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeViewConstraints_37 extends _i1.SmartFake
    implements _i8.ViewConstraints {
  _FakeViewConstraints_37(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSize_38 extends _i1.SmartFake implements _i8.Size {
  _FakeSize_38(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeViewPadding_39 extends _i1.SmartFake implements _i8.ViewPadding {
  _FakeViewPadding_39(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGestureSettings_40 extends _i1.SmartFake
    implements _i8.GestureSettings {
  _FakeGestureSettings_40(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_41 extends _i1.SmartFake implements _i20.Response {
  _FakeResponse_41(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$OfferingCopyWith_42<$Res> extends _i1.SmartFake
    implements _i21.$OfferingCopyWith<$Res> {
  _Fake$OfferingCopyWith_42(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$OfferingsCopyWith_43<$Res> extends _i1.SmartFake
    implements _i19.$OfferingsCopyWith<$Res> {
  _Fake$OfferingsCopyWith_43(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStoreProduct_44 extends _i1.SmartFake implements _i19.StoreProduct {
  _FakeStoreProduct_44(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePresentedOfferingContext_45 extends _i1.SmartFake
    implements _i19.PresentedOfferingContext {
  _FakePresentedOfferingContext_45(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$PackageCopyWith_46<$Res> extends _i1.SmartFake
    implements _i22.$PackageCopyWith<$Res> {
  _Fake$PackageCopyWith_46(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageInfo_47 extends _i1.SmartFake implements _i23.PackageInfo {
  _FakePackageInfo_47(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccessibilityFeatures_48 extends _i1.SmartFake
    implements _i8.AccessibilityFeatures {
  _FakeAccessibilityFeatures_48(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_49 extends _i1.SmartFake implements _i8.Locale {
  _FakeLocale_49(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFrameData_50 extends _i1.SmartFake implements _i8.FrameData {
  _FakeFrameData_50(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOfferings_51 extends _i1.SmartFake implements _i19.Offerings {
  _FakeOfferings_51(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCustomerInfo_52 extends _i1.SmartFake implements _i19.CustomerInfo {
  _FakeCustomerInfo_52(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRewardedAdLoadCallback_53 extends _i1.SmartFake
    implements _i6.RewardedAdLoadCallback {
  _FakeRewardedAdLoadCallback_53(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImage_54 extends _i1.SmartFake implements _i8.Image {
  _FakeImage_54(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDifficultyStats_55 extends _i1.SmartFake
    implements _i24.DifficultyStats {
  _FakeDifficultyStats_55(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$StoreProductCopyWith_56<$Res> extends _i1.SmartFake
    implements _i19.$StoreProductCopyWith<$Res> {
  _Fake$StoreProductCopyWith_56(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnmodifiableListView_57<E> extends _i1.SmartFake
    implements _i25.UnmodifiableListView<E> {
  _FakeUnmodifiableListView_57(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransform2D_58 extends _i1.SmartFake implements _i11.Transform2D {
  _FakeTransform2D_58(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDecorator_59 extends _i1.SmartFake implements _i26.Decorator {
  _FakeDecorator_59(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatrix4_60 extends _i1.SmartFake implements _i7.Matrix4 {
  _FakeMatrix4_60(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotifyingVector2_61 extends _i1.SmartFake
    implements _i11.NotifyingVector2 {
  _FakeNotifyingVector2_61(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnchor_62 extends _i1.SmartFake implements _i10.Anchor {
  _FakeAnchor_62(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTapdGame_63 extends _i1.SmartFake implements _i27.TapdGame {
  _FakeTapdGame_63(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLineSegment_64 extends _i1.SmartFake implements _i28.LineSegment {
  _FakeLineSegment_64(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOpacityProvider_65 extends _i1.SmartFake
    implements _i29.OpacityProvider {
  _FakeOpacityProvider_65(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComponentKey_66 extends _i1.SmartFake implements _i10.ComponentKey {
  _FakeComponentKey_66(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnalyticsWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsWrapper extends _i1.Mock implements _i30.AnalyticsWrapper {
  MockAnalyticsWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> logEvent({
    required String? name,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logEvent,
          [],
          {
            #name: name,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AndroidBuildVersion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidBuildVersion extends _i1.Mock
    implements _i2.AndroidBuildVersion {
  MockAndroidBuildVersion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get codename => (super.noSuchMethod(
        Invocation.getter(#codename),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#codename),
        ),
      ) as String);

  @override
  String get incremental => (super.noSuchMethod(
        Invocation.getter(#incremental),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#incremental),
        ),
      ) as String);

  @override
  String get release => (super.noSuchMethod(
        Invocation.getter(#release),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#release),
        ),
      ) as String);

  @override
  int get sdkInt => (super.noSuchMethod(
        Invocation.getter(#sdkInt),
        returnValue: 0,
      ) as int);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AndroidDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidDeviceInfo extends _i1.Mock implements _i2.AndroidDeviceInfo {
  MockAndroidDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AndroidBuildVersion get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _FakeAndroidBuildVersion_0(
          this,
          Invocation.getter(#version),
        ),
      ) as _i2.AndroidBuildVersion);

  @override
  String get board => (super.noSuchMethod(
        Invocation.getter(#board),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#board),
        ),
      ) as String);

  @override
  String get bootloader => (super.noSuchMethod(
        Invocation.getter(#bootloader),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#bootloader),
        ),
      ) as String);

  @override
  String get brand => (super.noSuchMethod(
        Invocation.getter(#brand),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#brand),
        ),
      ) as String);

  @override
  String get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#device),
        ),
      ) as String);

  @override
  String get display => (super.noSuchMethod(
        Invocation.getter(#display),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#display),
        ),
      ) as String);

  @override
  String get fingerprint => (super.noSuchMethod(
        Invocation.getter(#fingerprint),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#fingerprint),
        ),
      ) as String);

  @override
  String get hardware => (super.noSuchMethod(
        Invocation.getter(#hardware),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#hardware),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get manufacturer => (super.noSuchMethod(
        Invocation.getter(#manufacturer),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#manufacturer),
        ),
      ) as String);

  @override
  String get model => (super.noSuchMethod(
        Invocation.getter(#model),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#model),
        ),
      ) as String);

  @override
  String get product => (super.noSuchMethod(
        Invocation.getter(#product),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#product),
        ),
      ) as String);

  @override
  List<String> get supported32BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported32BitAbis),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get supported64BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported64BitAbis),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get supportedAbis => (super.noSuchMethod(
        Invocation.getter(#supportedAbis),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get tags => (super.noSuchMethod(
        Invocation.getter(#tags),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#tags),
        ),
      ) as String);

  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#type),
        ),
      ) as String);

  @override
  bool get isPhysicalDevice => (super.noSuchMethod(
        Invocation.getter(#isPhysicalDevice),
        returnValue: false,
      ) as bool);

  @override
  List<String> get systemFeatures => (super.noSuchMethod(
        Invocation.getter(#systemFeatures),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get serialNumber => (super.noSuchMethod(
        Invocation.getter(#serialNumber),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#serialNumber),
        ),
      ) as String);

  @override
  bool get isLowRamDevice => (super.noSuchMethod(
        Invocation.getter(#isLowRamDevice),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AudioManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioManager extends _i1.Mock implements _i33.AudioManager {
  MockAudioManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i8.VoidCallback onButtonPressed([_i8.VoidCallback? callback]) =>
      (super.noSuchMethod(
        Invocation.method(
          #onButtonPressed,
          [callback],
        ),
        returnValue: () {},
      ) as _i8.VoidCallback);

  @override
  _i4.Future<void> resumeMusic() => (super.noSuchMethod(
        Invocation.method(
          #resumeMusic,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pauseMusic() => (super.noSuchMethod(
        Invocation.method(
          #pauseMusic,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playMenuBackground() => (super.noSuchMethod(
        Invocation.method(
          #playMenuBackground,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playGameBackground() => (super.noSuchMethod(
        Invocation.method(
          #playGameBackground,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playCorrectHit() => (super.noSuchMethod(
        Invocation.method(
          #playCorrectHit,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playIncorrectHit() => (super.noSuchMethod(
        Invocation.method(
          #playIncorrectHit,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playSwitchTarget() => (super.noSuchMethod(
        Invocation.method(
          #playSwitchTarget,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i3.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AudioCache get audioCache => (super.noSuchMethod(
        Invocation.getter(#audioCache),
        returnValue: _FakeAudioCache_1(
          this,
          Invocation.getter(#audioCache),
        ),
      ) as _i3.AudioCache);

  @override
  set audioCache(_i3.AudioCache? _audioCache) => super.noSuchMethod(
        Invocation.setter(
          #audioCache,
          _audioCache,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get playerId => (super.noSuchMethod(
        Invocation.getter(#playerId),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#playerId),
        ),
      ) as String);

  @override
  _i3.PlayerState get desiredState => (super.noSuchMethod(
        Invocation.getter(#desiredState),
        returnValue: _i3.PlayerState.stopped,
      ) as _i3.PlayerState);

  @override
  set desiredState(_i3.PlayerState? _desiredState) => super.noSuchMethod(
        Invocation.setter(
          #desiredState,
          _desiredState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Completer<void> get creatingCompleter => (super.noSuchMethod(
        Invocation.getter(#creatingCompleter),
        returnValue: _FakeCompleter_2<void>(
          this,
          Invocation.getter(#creatingCompleter),
        ),
      ) as _i4.Completer<void>);

  @override
  double get volume => (super.noSuchMethod(
        Invocation.getter(#volume),
        returnValue: 0.0,
      ) as double);

  @override
  double get balance => (super.noSuchMethod(
        Invocation.getter(#balance),
        returnValue: 0.0,
      ) as double);

  @override
  double get playbackRate => (super.noSuchMethod(
        Invocation.getter(#playbackRate),
        returnValue: 0.0,
      ) as double);

  @override
  _i3.PlayerMode get mode => (super.noSuchMethod(
        Invocation.getter(#mode),
        returnValue: _i3.PlayerMode.mediaPlayer,
      ) as _i3.PlayerMode);

  @override
  _i3.ReleaseMode get releaseMode => (super.noSuchMethod(
        Invocation.getter(#releaseMode),
        returnValue: _i3.ReleaseMode.release,
      ) as _i3.ReleaseMode);

  @override
  _i3.PlayerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.PlayerState.stopped,
      ) as _i3.PlayerState);

  @override
  set state(_i3.PlayerState? state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          state,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i3.AudioEvent> get eventStream => (super.noSuchMethod(
        Invocation.getter(#eventStream),
        returnValue: _i4.Stream<_i3.AudioEvent>.empty(),
      ) as _i4.Stream<_i3.AudioEvent>);

  @override
  _i4.Stream<_i3.PlayerState> get onPlayerStateChanged => (super.noSuchMethod(
        Invocation.getter(#onPlayerStateChanged),
        returnValue: _i4.Stream<_i3.PlayerState>.empty(),
      ) as _i4.Stream<_i3.PlayerState>);

  @override
  _i4.Stream<Duration> get onPositionChanged => (super.noSuchMethod(
        Invocation.getter(#onPositionChanged),
        returnValue: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<Duration> get onDurationChanged => (super.noSuchMethod(
        Invocation.getter(#onDurationChanged),
        returnValue: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<void> get onPlayerComplete => (super.noSuchMethod(
        Invocation.getter(#onPlayerComplete),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  _i4.Stream<void> get onSeekComplete => (super.noSuchMethod(
        Invocation.getter(#onSeekComplete),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  _i4.Stream<String> get onLog => (super.noSuchMethod(
        Invocation.getter(#onLog),
        returnValue: _i4.Stream<String>.empty(),
      ) as _i4.Stream<String>);

  @override
  set positionUpdater(_i3.PositionUpdater? positionUpdater) =>
      super.noSuchMethod(
        Invocation.setter(
          #positionUpdater,
          positionUpdater,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> play(
    _i3.Source? source, {
    double? volume,
    double? balance,
    _i3.AudioContext? ctx,
    Duration? position,
    _i3.PlayerMode? mode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #play,
          [source],
          {
            #volume: volume,
            #balance: balance,
            #ctx: ctx,
            #position: position,
            #mode: mode,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAudioContext(_i3.AudioContext? ctx) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAudioContext,
          [ctx],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPlayerMode(_i3.PlayerMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setPlayerMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> release() => (super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seek(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seek,
          [position],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setBalance(double? balance) => (super.noSuchMethod(
        Invocation.method(
          #setBalance,
          [balance],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setReleaseMode(_i3.ReleaseMode? releaseMode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReleaseMode,
          [releaseMode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPlaybackRate(double? playbackRate) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackRate,
          [playbackRate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSource(_i3.Source? source) => (super.noSuchMethod(
        Invocation.method(
          #setSource,
          [source],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceUrl(
    String? url, {
    String? mimeType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSourceUrl,
          [url],
          {#mimeType: mimeType},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceDeviceFile(
    String? path, {
    String? mimeType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSourceDeviceFile,
          [path],
          {#mimeType: mimeType},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceAsset(
    String? path, {
    String? mimeType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSourceAsset,
          [path],
          {#mimeType: mimeType},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceBytes(
    _i34.Uint8List? bytes, {
    String? mimeType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSourceBytes,
          [bytes],
          {#mimeType: mimeType},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Duration?> getDuration() => (super.noSuchMethod(
        Invocation.method(
          #getDuration,
          [],
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AudioPool].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPool extends _i1.Mock implements _i3.AudioPool {
  MockAudioPool() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i3.AudioPlayer> get currentPlayers => (super.noSuchMethod(
        Invocation.getter(#currentPlayers),
        returnValue: <String, _i3.AudioPlayer>{},
      ) as Map<String, _i3.AudioPlayer>);

  @override
  List<_i3.AudioPlayer> get availablePlayers => (super.noSuchMethod(
        Invocation.getter(#availablePlayers),
        returnValue: <_i3.AudioPlayer>[],
      ) as List<_i3.AudioPlayer>);

  @override
  _i3.AudioCache get audioCache => (super.noSuchMethod(
        Invocation.getter(#audioCache),
        returnValue: _FakeAudioCache_1(
          this,
          Invocation.getter(#audioCache),
        ),
      ) as _i3.AudioCache);

  @override
  _i3.Source get source => (super.noSuchMethod(
        Invocation.getter(#source),
        returnValue: _FakeSource_3(
          this,
          Invocation.getter(#source),
        ),
      ) as _i3.Source);

  @override
  int get minPlayers => (super.noSuchMethod(
        Invocation.getter(#minPlayers),
        returnValue: 0,
      ) as int);

  @override
  int get maxPlayers => (super.noSuchMethod(
        Invocation.getter(#maxPlayers),
        returnValue: 0,
      ) as int);

  @override
  _i4.Future<_i3.StopFunction> start({double? volume = 1.0}) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
          {#volume: volume},
        ),
        returnValue:
            _i4.Future<_i3.StopFunction>.value(() => _i4.Future<void>.value()),
      ) as _i4.Future<_i3.StopFunction>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [BannerAd].
///
/// See the documentation for Mockito's code generation for more information.
class MockBannerAd extends _i1.Mock implements _i5.BannerAd {
  MockBannerAd() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AdRequest get request => (super.noSuchMethod(
        Invocation.getter(#request),
        returnValue: _FakeAdRequest_4(
          this,
          Invocation.getter(#request),
        ),
      ) as _i5.AdRequest);

  @override
  _i5.AdSize get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeAdSize_5(
          this,
          Invocation.getter(#size),
        ),
      ) as _i5.AdSize);

  @override
  _i6.BannerAdListener get listener => (super.noSuchMethod(
        Invocation.getter(#listener),
        returnValue: _FakeBannerAdListener_6(
          this,
          Invocation.getter(#listener),
        ),
      ) as _i6.BannerAdListener);

  @override
  String get adUnitId => (super.noSuchMethod(
        Invocation.getter(#adUnitId),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#adUnitId),
        ),
      ) as String);

  @override
  set responseInfo(_i5.ResponseInfo? _responseInfo) => super.noSuchMethod(
        Invocation.setter(
          #responseInfo,
          _responseInfo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.AdSize?> getPlatformAdSize() => (super.noSuchMethod(
        Invocation.method(
          #getPlatformAdSize,
          [],
        ),
        returnValue: _i4.Future<_i5.AdSize?>.value(),
      ) as _i4.Future<_i5.AdSize?>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [BannerAdWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockBannerAdWrapper extends _i1.Mock implements _i35.BannerAdWrapper {
  MockBannerAdWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.BannerAd newAd({
    required _i5.AdSize? size,
    required String? adUnitId,
    required _i6.BannerAdListener? listener,
    required _i5.AdRequest? request,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #newAd,
          [],
          {
            #size: size,
            #adUnitId: adUnitId,
            #listener: listener,
            #request: request,
          },
        ),
        returnValue: _FakeBannerAd_7(
          this,
          Invocation.method(
            #newAd,
            [],
            {
              #size: size,
              #adUnitId: adUnitId,
              #listener: listener,
              #request: request,
            },
          ),
        ),
      ) as _i5.BannerAd);

  @override
  _i7.Widget newWidget({required _i5.AdWithView? ad}) => (super.noSuchMethod(
        Invocation.method(
          #newWidget,
          [],
          {#ad: ad},
        ),
        returnValue: _FakeWidget_8(
          this,
          Invocation.method(
            #newWidget,
            [],
            {#ad: ad},
          ),
        ),
      ) as _i7.Widget);
}

/// A class which mocks [Canvas].
///
/// See the documentation for Mockito's code generation for more information.
class MockCanvas extends _i1.Mock implements _i8.Canvas {
  MockCanvas() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void save() => super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void saveLayer(
    _i8.Rect? bounds,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #saveLayer,
          [
            bounds,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void restore() => super.noSuchMethod(
        Invocation.method(
          #restore,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void restoreToCount(int? count) => super.noSuchMethod(
        Invocation.method(
          #restoreToCount,
          [count],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getSaveCount() => (super.noSuchMethod(
        Invocation.method(
          #getSaveCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void translate(
    double? dx,
    double? dy,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #translate,
          [
            dx,
            dy,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void scale(
    double? sx, [
    double? sy,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #scale,
          [
            sx,
            sy,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rotate(double? radians) => super.noSuchMethod(
        Invocation.method(
          #rotate,
          [radians],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void skew(
    double? sx,
    double? sy,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #skew,
          [
            sx,
            sy,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void transform(_i34.Float64List? matrix4) => super.noSuchMethod(
        Invocation.method(
          #transform,
          [matrix4],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i34.Float64List getTransform() => (super.noSuchMethod(
        Invocation.method(
          #getTransform,
          [],
        ),
        returnValue: _i34.Float64List(0),
      ) as _i34.Float64List);

  @override
  void clipRect(
    _i8.Rect? rect, {
    _i8.ClipOp? clipOp = _i8.ClipOp.intersect,
    bool? doAntiAlias = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #clipRect,
          [rect],
          {
            #clipOp: clipOp,
            #doAntiAlias: doAntiAlias,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clipRRect(
    _i8.RRect? rrect, {
    bool? doAntiAlias = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #clipRRect,
          [rrect],
          {#doAntiAlias: doAntiAlias},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clipPath(
    _i8.Path? path, {
    bool? doAntiAlias = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #clipPath,
          [path],
          {#doAntiAlias: doAntiAlias},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Rect getLocalClipBounds() => (super.noSuchMethod(
        Invocation.method(
          #getLocalClipBounds,
          [],
        ),
        returnValue: _FakeRect_9(
          this,
          Invocation.method(
            #getLocalClipBounds,
            [],
          ),
        ),
      ) as _i8.Rect);

  @override
  _i8.Rect getDestinationClipBounds() => (super.noSuchMethod(
        Invocation.method(
          #getDestinationClipBounds,
          [],
        ),
        returnValue: _FakeRect_9(
          this,
          Invocation.method(
            #getDestinationClipBounds,
            [],
          ),
        ),
      ) as _i8.Rect);

  @override
  void drawColor(
    _i8.Color? color,
    _i8.BlendMode? blendMode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawColor,
          [
            color,
            blendMode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawLine(
    _i8.Offset? p1,
    _i8.Offset? p2,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawLine,
          [
            p1,
            p2,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawPaint(_i8.Paint? paint) => super.noSuchMethod(
        Invocation.method(
          #drawPaint,
          [paint],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawRect(
    _i8.Rect? rect,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawRect,
          [
            rect,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawRRect(
    _i8.RRect? rrect,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawRRect,
          [
            rrect,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawDRRect(
    _i8.RRect? outer,
    _i8.RRect? inner,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawDRRect,
          [
            outer,
            inner,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawOval(
    _i8.Rect? rect,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawOval,
          [
            rect,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawCircle(
    _i8.Offset? c,
    double? radius,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawCircle,
          [
            c,
            radius,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawArc(
    _i8.Rect? rect,
    double? startAngle,
    double? sweepAngle,
    bool? useCenter,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawArc,
          [
            rect,
            startAngle,
            sweepAngle,
            useCenter,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawPath(
    _i8.Path? path,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawPath,
          [
            path,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawImage(
    _i8.Image? image,
    _i8.Offset? offset,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawImage,
          [
            image,
            offset,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawImageRect(
    _i8.Image? image,
    _i8.Rect? src,
    _i8.Rect? dst,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawImageRect,
          [
            image,
            src,
            dst,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawImageNine(
    _i8.Image? image,
    _i8.Rect? center,
    _i8.Rect? dst,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawImageNine,
          [
            image,
            center,
            dst,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawPicture(_i8.Picture? picture) => super.noSuchMethod(
        Invocation.method(
          #drawPicture,
          [picture],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawParagraph(
    _i8.Paragraph? paragraph,
    _i8.Offset? offset,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawParagraph,
          [
            paragraph,
            offset,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawPoints(
    _i8.PointMode? pointMode,
    List<_i8.Offset>? points,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawPoints,
          [
            pointMode,
            points,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawRawPoints(
    _i8.PointMode? pointMode,
    _i34.Float32List? points,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawRawPoints,
          [
            pointMode,
            points,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawVertices(
    _i8.Vertices? vertices,
    _i8.BlendMode? blendMode,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawVertices,
          [
            vertices,
            blendMode,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawAtlas(
    _i8.Image? atlas,
    List<_i8.RSTransform>? transforms,
    List<_i8.Rect>? rects,
    List<_i8.Color>? colors,
    _i8.BlendMode? blendMode,
    _i8.Rect? cullRect,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawAtlas,
          [
            atlas,
            transforms,
            rects,
            colors,
            blendMode,
            cullRect,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawRawAtlas(
    _i8.Image? atlas,
    _i34.Float32List? rstTransforms,
    _i34.Float32List? rects,
    _i34.Int32List? colors,
    _i8.BlendMode? blendMode,
    _i8.Rect? cullRect,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawRawAtlas,
          [
            atlas,
            rstTransforms,
            rects,
            colors,
            blendMode,
            cullRect,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawShadow(
    _i8.Path? path,
    _i8.Color? color,
    double? elevation,
    bool? transparentOccluder,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawShadow,
          [
            path,
            color,
            elevation,
            transparentOccluder,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CrashlyticsWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashlyticsWrapper extends _i1.Mock
    implements _i36.CrashlyticsWrapper {
  MockCrashlyticsWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> log(String? message) => (super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> recordError(
    String? message,
    StackTrace? stack,
    String? reason,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            message,
            stack,
            reason,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [TapdGame].
///
/// See the documentation for Mockito's code generation for more information.
class MockTapdGame extends _i1.Mock implements _i27.TapdGame {
  MockTapdGame() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.ComponentsNotifier<_i10.Component>> get notifiers =>
      (super.noSuchMethod(
        Invocation.getter(#notifiers),
        returnValue: <_i10.ComponentsNotifier<_i10.Component>>[],
      ) as List<_i10.ComponentsNotifier<_i10.Component>>);

  @override
  bool get pauseWhenBackgrounded => (super.noSuchMethod(
        Invocation.getter(#pauseWhenBackgrounded),
        returnValue: false,
      ) as bool);

  @override
  set pauseWhenBackgrounded(bool? _pauseWhenBackgrounded) => super.noSuchMethod(
        Invocation.setter(
          #pauseWhenBackgrounded,
          _pauseWhenBackgrounded,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.TapdWorld get world => (super.noSuchMethod(
        Invocation.getter(#world),
        returnValue: _FakeTapdWorld_10(
          this,
          Invocation.getter(#world),
        ),
      ) as _i9.TapdWorld);

  @override
  set world(_i9.TapdWorld? newWorld) => super.noSuchMethod(
        Invocation.setter(
          #world,
          newWorld,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.CameraComponent get camera => (super.noSuchMethod(
        Invocation.getter(#camera),
        returnValue: _FakeCameraComponent_11(
          this,
          Invocation.getter(#camera),
        ),
      ) as _i10.CameraComponent);

  @override
  set camera(_i10.CameraComponent? newCameraComponent) => super.noSuchMethod(
        Invocation.setter(
          #camera,
          newCameraComponent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#size),
        ),
      ) as _i11.Vector2);

  @override
  bool get hasLifecycleEvents => (super.noSuchMethod(
        Invocation.getter(#hasLifecycleEvents),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> get lifecycleEventsProcessed => (super.noSuchMethod(
        Invocation.getter(#lifecycleEventsProcessed),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool get debugMode => (super.noSuchMethod(
        Invocation.getter(#debugMode),
        returnValue: false,
      ) as bool);

  @override
  set debugMode(bool? _debugMode) => super.noSuchMethod(
        Invocation.setter(
          #debugMode,
          _debugMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugCoordinatesPrecision(int? _debugCoordinatesPrecision) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCoordinatesPrecision,
          _debugCoordinatesPrecision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Color get debugColor => (super.noSuchMethod(
        Invocation.getter(#debugColor),
        returnValue: _FakeColor_13(
          this,
          Invocation.getter(#debugColor),
        ),
      ) as _i8.Color);

  @override
  set debugColor(_i8.Color? _debugColor) => super.noSuchMethod(
        Invocation.setter(
          #debugColor,
          _debugColor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounting => (super.noSuchMethod(
        Invocation.getter(#isMounting),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounted => (super.noSuchMethod(
        Invocation.getter(#isMounted),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoving => (super.noSuchMethod(
        Invocation.getter(#isRemoving),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoved => (super.noSuchMethod(
        Invocation.getter(#isRemoved),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  set parent(_i10.Component? newParent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          newParent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.getter(#children),
        ),
      ) as _i10.ComponentSet);

  @override
  bool get hasChildren => (super.noSuchMethod(
        Invocation.getter(#hasChildren),
        returnValue: false,
      ) as bool);

  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
      ) as int);

  @override
  set priority(int? newPriority) => super.noSuchMethod(
        Invocation.setter(
          #priority,
          newPriority,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Paint get debugPaint => (super.noSuchMethod(
        Invocation.getter(#debugPaint),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.getter(#debugPaint),
        ),
      ) as _i8.Paint);

  @override
  _i11.TextPaint get debugTextPaint => (super.noSuchMethod(
        Invocation.getter(#debugTextPaint),
        returnValue: _FakeTextPaint_15(
          this,
          Invocation.getter(#debugTextPaint),
        ),
      ) as _i11.TextPaint);

  @override
  _i12.Images get images => (super.noSuchMethod(
        Invocation.getter(#images),
        returnValue: _FakeImages_16(
          this,
          Invocation.getter(#images),
        ),
      ) as _i12.Images);

  @override
  set images(_i12.Images? _images) => super.noSuchMethod(
        Invocation.setter(
          #images,
          _images,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.AssetsCache get assets => (super.noSuchMethod(
        Invocation.getter(#assets),
        returnValue: _FakeAssetsCache_17(
          this,
          Invocation.getter(#assets),
        ),
      ) as _i12.AssetsCache);

  @override
  set assets(_i12.AssetsCache? _assets) => super.noSuchMethod(
        Invocation.setter(
          #assets,
          _assets,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.GestureDetectorBuilder get gestureDetectors => (super.noSuchMethod(
        Invocation.getter(#gestureDetectors),
        returnValue: _FakeGestureDetectorBuilder_18(
          this,
          Invocation.getter(#gestureDetectors),
        ),
      ) as _i13.GestureDetectorBuilder);

  @override
  _i14.OverlayManager get overlays => (super.noSuchMethod(
        Invocation.getter(#overlays),
        returnValue: _FakeOverlayManager_19(
          this,
          Invocation.getter(#overlays),
        ),
      ) as _i14.OverlayManager);

  @override
  List<_i8.VoidCallback> get gameStateListeners => (super.noSuchMethod(
        Invocation.getter(#gameStateListeners),
        returnValue: <_i8.VoidCallback>[],
      ) as List<_i8.VoidCallback>);

  @override
  set mouseDetector(void Function(_i37.PointerHoverEvent)? newMouseDetector) =>
      super.noSuchMethod(
        Invocation.setter(
          #mouseDetector,
          newMouseDetector,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.GameRenderBox get renderBox => (super.noSuchMethod(
        Invocation.getter(#renderBox),
        returnValue: _FakeGameRenderBox_20(
          this,
          Invocation.getter(#renderBox),
        ),
      ) as _i15.GameRenderBox);

  @override
  bool get isAttached => (super.noSuchMethod(
        Invocation.getter(#isAttached),
        returnValue: false,
      ) as bool);

  @override
  _i11.Vector2 get canvasSize => (super.noSuchMethod(
        Invocation.getter(#canvasSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#canvasSize),
        ),
      ) as _i11.Vector2);

  @override
  bool get hasLayout => (super.noSuchMethod(
        Invocation.getter(#hasLayout),
        returnValue: false,
      ) as bool);

  @override
  bool get paused => (super.noSuchMethod(
        Invocation.getter(#paused),
        returnValue: false,
      ) as bool);

  @override
  set paused(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #paused,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.MouseCursor get mouseCursor => (super.noSuchMethod(
        Invocation.getter(#mouseCursor),
        returnValue: _FakeMouseCursor_21(
          this,
          Invocation.getter(#mouseCursor),
        ),
      ) as _i7.MouseCursor);

  @override
  set mouseCursor(_i7.MouseCursor? value) => super.noSuchMethod(
        Invocation.setter(
          #mouseCursor,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Color backgroundColor() => (super.noSuchMethod(
        Invocation.method(
          #backgroundColor,
          [],
        ),
        returnValue: _FakeColor_13(
          this,
          Invocation.method(
            #backgroundColor,
            [],
          ),
        ),
      ) as _i8.Color);

  @override
  void onGameResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #onGameResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void mount() => super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void finalizeRemoval() => super.noSuchMethod(
        Invocation.method(
          #finalizeRemoval,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderTree(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderTree,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update(double? dt) => super.noSuchMethod(
        Invocation.method(
          #update,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTree(double? dt) => super.noSuchMethod(
        Invocation.method(
          #updateTree,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> ready() => (super.noSuchMethod(
        Invocation.method(
          #ready,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool containsLocalPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsLocalPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  double currentTime() => (super.noSuchMethod(
        Invocation.method(
          #currentTime,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i10.ComponentsNotifier<T> componentsNotifier<T extends _i10.Component>() =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsNotifier,
          [],
        ),
        returnValue: _FakeComponentsNotifier_22<T>(
          this,
          Invocation.method(
            #componentsNotifier,
            [],
          ),
        ),
      ) as _i10.ComponentsNotifier<T>);

  @override
  void propagateToApplicableNotifiers(
    _i10.Component? component,
    void Function(_i10.ComponentsNotifier<_i10.Component>)? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #propagateToApplicableNotifiers,
          [
            component,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void lifecycleStateChange(_i8.AppLifecycleState? state) => super.noSuchMethod(
        Invocation.method(
          #lifecycleStateChange,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseEngine() => super.noSuchMethod(
        Invocation.method(
          #pauseEngine,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resumeEngine() => super.noSuchMethod(
        Invocation.method(
          #resumeEngine,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueAdd(
    _i10.Component? child,
    _i10.Component? parent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #enqueueAdd,
          [
            child,
            parent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dequeueAdd(
    _i10.Component? child,
    _i10.Component? parent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #dequeueAdd,
          [
            child,
            parent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueRemove(
    _i10.Component? child,
    _i10.Component? parent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #enqueueRemove,
          [
            child,
            parent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dequeueRemove(_i10.Component? child) => super.noSuchMethod(
        Invocation.method(
          #dequeueRemove,
          [child],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueMove(
    _i10.Component? child,
    _i10.Component? newParent,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #enqueueMove,
          [
            child,
            newParent,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enqueueRebalance(_i10.Component? parent) => super.noSuchMethod(
        Invocation.method(
          #enqueueRebalance,
          [parent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void processLifecycleEvents() => super.noSuchMethod(
        Invocation.method(
          #processLifecycleEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void processRebalanceEvents() => super.noSuchMethod(
        Invocation.method(
          #processRebalanceEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #handleResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerKey(
    _i10.ComponentKey? key,
    _i10.Component? component,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerKey,
          [
            key,
            component,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterKey(_i10.ComponentKey? key) => super.noSuchMethod(
        Invocation.method(
          #unregisterKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T? findByKey<T extends _i10.Component>(_i10.ComponentKey? key) =>
      (super.noSuchMethod(Invocation.method(
        #findByKey,
        [key],
      )) as T?);

  @override
  T? findByKeyName<T extends _i10.Component>(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #findByKeyName,
        [name],
      )) as T?);

  @override
  _i10.ComponentSet createComponentSet() => (super.noSuchMethod(
        Invocation.method(
          #createComponentSet,
          [],
        ),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.method(
            #createComponentSet,
            [],
          ),
        ),
      ) as _i10.ComponentSet);

  @override
  T? findParent<T extends _i10.Component>({bool? includeSelf = false}) =>
      (super.noSuchMethod(Invocation.method(
        #findParent,
        [],
        {#includeSelf: includeSelf},
      )) as T?);

  @override
  Iterable<_i10.Component> ancestors({bool? includeSelf = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #ancestors,
          [],
          {#includeSelf: includeSelf},
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> descendants({
    bool? includeSelf = false,
    bool? reversed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #descendants,
          [],
          {
            #includeSelf: includeSelf,
            #reversed: reversed,
          },
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  bool propagateToChildren<T extends _i10.Component>(
    bool Function(T)? handler, {
    bool? includeSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #propagateToChildren,
          [handler],
          {#includeSelf: includeSelf},
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(_i10.Component? c) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [c],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onMount() => super.noSuchMethod(
        Invocation.method(
          #onMount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemove() => super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onParentResize(_i11.Vector2? maxSize) => super.noSuchMethod(
        Invocation.method(
          #onParentResize,
          [maxSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChildrenChanged(
    _i10.Component? child,
    _i10.ChildrenChangeType? type,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChildrenChanged,
          [
            child,
            type,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FutureOr<void> add(_i10.Component? component) =>
      (super.noSuchMethod(Invocation.method(
        #add,
        [component],
      )) as _i4.FutureOr<void>);

  @override
  _i4.FutureOr<void> addToParent(_i10.Component? parent) =>
      (super.noSuchMethod(Invocation.method(
        #addToParent,
        [parent],
      )) as _i4.FutureOr<void>);

  @override
  _i4.Future<void> addAll(Iterable<_i10.Component>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [components],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void remove(_i10.Component? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromParent() => super.noSuchMethod(
        Invocation.method(
          #removeFromParent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(Iterable<_i10.Component>? components) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [components],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i10.Component)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i10.Component> componentsAtPoint(
    _i11.Vector2? point, [
    List<_i11.Vector2>? nestedPoints,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtPoint,
          [
            point,
            nestedPoints,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> componentsAtLocation<T>(
    T? locationContext,
    List<T>? nestedContexts,
    T? Function(
      _i10.CoordinateTransform,
      T,
    )? transformContext,
    bool Function(
      _i10.Component,
      T,
    )? checkContains,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtLocation,
          [
            locationContext,
            nestedContexts,
            transformContext,
            checkContains,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventAdd(_i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventAdd,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventRemove(
          _i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventRemove,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventMove(
          _i10.Component? newParent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventMove,
          [newParent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  void setLoaded() => super.noSuchMethod(
        Invocation.method(
          #setLoaded,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMounted() => super.noSuchMethod(
        Invocation.method(
          #setMounted,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRemoved() => super.noSuchMethod(
        Invocation.method(
          #setRemoved,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderDebugMode(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderDebugMode,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void assertHasLayout() => super.noSuchMethod(
        Invocation.method(
          #assertHasLayout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void attach(
    _i39.PipelineOwner? owner,
    _i15.GameRenderBox? gameRenderBox,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #attach,
          [
            owner,
            gameRenderBox,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAttach() => super.noSuchMethod(
        Invocation.method(
          #onAttach,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void detach() => super.noSuchMethod(
        Invocation.method(
          #detach,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose() => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDetach() => super.noSuchMethod(
        Invocation.method(
          #onDetach,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 convertGlobalToLocalCoordinate(_i11.Vector2? point) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertGlobalToLocalCoordinate,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #convertGlobalToLocalCoordinate,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 convertLocalToGlobalCoordinate(_i11.Vector2? point) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertLocalToGlobalCoordinate,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #convertLocalToGlobalCoordinate,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i4.Future<_i10.Sprite> loadSprite(
    String? path, {
    _i11.Vector2? srcSize,
    _i11.Vector2? srcPosition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSprite,
          [path],
          {
            #srcSize: srcSize,
            #srcPosition: srcPosition,
          },
        ),
        returnValue: _i4.Future<_i10.Sprite>.value(_FakeSprite_23(
          this,
          Invocation.method(
            #loadSprite,
            [path],
            {
              #srcSize: srcSize,
              #srcPosition: srcPosition,
            },
          ),
        )),
      ) as _i4.Future<_i10.Sprite>);

  @override
  _i4.Future<_i10.SpriteAnimation> loadSpriteAnimation(
    String? path,
    _i10.SpriteAnimationData? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSpriteAnimation,
          [
            path,
            data,
          ],
        ),
        returnValue:
            _i4.Future<_i10.SpriteAnimation>.value(_FakeSpriteAnimation_24(
          this,
          Invocation.method(
            #loadSpriteAnimation,
            [
              path,
              data,
            ],
          ),
        )),
      ) as _i4.Future<_i10.SpriteAnimation>);

  @override
  void stepEngine({double? stepTime = 0.016666666666666666}) =>
      super.noSuchMethod(
        Invocation.method(
          #stepEngine,
          [],
          {#stepTime: stepTime},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addGameStateListener(_i8.VoidCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #addGameStateListener,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeGameStateListener(_i8.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #removeGameStateListener,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshWidget({bool? isInternalRefresh = true}) => super.noSuchMethod(
        Invocation.method(
          #refreshWidget,
          [],
          {#isInternalRefresh: isInternalRefresh},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TapdWorld].
///
/// See the documentation for Mockito's code generation for more information.
class MockTapdWorld extends _i1.Mock implements _i9.TapdWorld {
  MockTapdWorld() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get shouldShowNewHighScore => (super.noSuchMethod(
        Invocation.getter(#shouldShowNewHighScore),
        returnValue: false,
      ) as bool);

  @override
  set shouldShowNewHighScore(bool? _shouldShowNewHighScore) =>
      super.noSuchMethod(
        Invocation.setter(
          #shouldShowNewHighScore,
          _shouldShowNewHighScore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set instructionsY(double? _instructionsY) => super.noSuchMethod(
        Invocation.setter(
          #instructionsY,
          _instructionsY,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get speed => (super.noSuchMethod(
        Invocation.getter(#speed),
        returnValue: 0.0,
      ) as double);

  @override
  _i16.TargetColor get color => (super.noSuchMethod(
        Invocation.getter(#color),
        returnValue: _FakeTargetColor_25(
          this,
          Invocation.getter(#color),
        ),
      ) as _i16.TargetColor);

  @override
  int get score => (super.noSuchMethod(
        Invocation.getter(#score),
        returnValue: 0,
      ) as int);

  @override
  bool get scrollingPaused => (super.noSuchMethod(
        Invocation.getter(#scrollingPaused),
        returnValue: false,
      ) as bool);

  @override
  set scrollingPaused(bool? paused) => super.noSuchMethod(
        Invocation.setter(
          #scrollingPaused,
          paused,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get debugMode => (super.noSuchMethod(
        Invocation.getter(#debugMode),
        returnValue: false,
      ) as bool);

  @override
  set debugMode(bool? _debugMode) => super.noSuchMethod(
        Invocation.setter(
          #debugMode,
          _debugMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugCoordinatesPrecision(int? _debugCoordinatesPrecision) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCoordinatesPrecision,
          _debugCoordinatesPrecision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Color get debugColor => (super.noSuchMethod(
        Invocation.getter(#debugColor),
        returnValue: _FakeColor_13(
          this,
          Invocation.getter(#debugColor),
        ),
      ) as _i8.Color);

  @override
  set debugColor(_i8.Color? _debugColor) => super.noSuchMethod(
        Invocation.setter(
          #debugColor,
          _debugColor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounting => (super.noSuchMethod(
        Invocation.getter(#isMounting),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounted => (super.noSuchMethod(
        Invocation.getter(#isMounted),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoving => (super.noSuchMethod(
        Invocation.getter(#isRemoving),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoved => (super.noSuchMethod(
        Invocation.getter(#isRemoved),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  set parent(_i10.Component? newParent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          newParent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.getter(#children),
        ),
      ) as _i10.ComponentSet);

  @override
  bool get hasChildren => (super.noSuchMethod(
        Invocation.getter(#hasChildren),
        returnValue: false,
      ) as bool);

  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
      ) as int);

  @override
  set priority(int? newPriority) => super.noSuchMethod(
        Invocation.setter(
          #priority,
          newPriority,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Paint get debugPaint => (super.noSuchMethod(
        Invocation.getter(#debugPaint),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.getter(#debugPaint),
        ),
      ) as _i8.Paint);

  @override
  _i11.TextPaint get debugTextPaint => (super.noSuchMethod(
        Invocation.getter(#debugTextPaint),
        returnValue: _FakeTextPaint_15(
          this,
          Invocation.getter(#debugTextPaint),
        ),
      ) as _i11.TextPaint);

  @override
  _i11.FlameGame<_i10.World> get game => (super.noSuchMethod(
        Invocation.getter(#game),
        returnValue: _FakeFlameGame_26<_i10.World>(
          this,
          Invocation.getter(#game),
        ),
      ) as _i11.FlameGame<_i10.World>);

  @override
  set game(_i11.FlameGame<_i10.World>? value) => super.noSuchMethod(
        Invocation.setter(
          #game,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.FlameGame<_i10.World> get gameRef => (super.noSuchMethod(
        Invocation.getter(#gameRef),
        returnValue: _FakeFlameGame_26<_i10.World>(
          this,
          Invocation.getter(#gameRef),
        ),
      ) as _i11.FlameGame<_i10.World>);

  @override
  void onLoad() => super.noSuchMethod(
        Invocation.method(
          #onLoad,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update(double? dt) => super.noSuchMethod(
        Invocation.method(
          #update,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleTargetHit({required bool? isCorrect}) => super.noSuchMethod(
        Invocation.method(
          #handleTargetHit,
          [],
          {#isCorrect: isCorrect},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleTargetMissed(
    _i40.Target? target,
    _i41.TargetBoard? board,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleTargetMissed,
          [
            target,
            board,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void play() => super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void hideInstructions() => super.noSuchMethod(
        Invocation.method(
          #hideInstructions,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderTree(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderTree,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderFromCamera(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderFromCamera,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsLocalPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsLocalPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i11.Vector2? localToParent(_i11.Vector2? point) =>
      (super.noSuchMethod(Invocation.method(
        #localToParent,
        [point],
      )) as _i11.Vector2?);

  @override
  _i11.Vector2? parentToLocal(_i11.Vector2? point) =>
      (super.noSuchMethod(Invocation.method(
        #parentToLocal,
        [point],
      )) as _i11.Vector2?);

  @override
  _i10.ComponentSet createComponentSet() => (super.noSuchMethod(
        Invocation.method(
          #createComponentSet,
          [],
        ),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.method(
            #createComponentSet,
            [],
          ),
        ),
      ) as _i10.ComponentSet);

  @override
  T? findParent<T extends _i10.Component>({bool? includeSelf = false}) =>
      (super.noSuchMethod(Invocation.method(
        #findParent,
        [],
        {#includeSelf: includeSelf},
      )) as T?);

  @override
  Iterable<_i10.Component> ancestors({bool? includeSelf = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #ancestors,
          [],
          {#includeSelf: includeSelf},
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> descendants({
    bool? includeSelf = false,
    bool? reversed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #descendants,
          [],
          {
            #includeSelf: includeSelf,
            #reversed: reversed,
          },
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  bool propagateToChildren<T extends _i10.Component>(
    bool Function(T)? handler, {
    bool? includeSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #propagateToChildren,
          [handler],
          {#includeSelf: includeSelf},
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(_i10.Component? c) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [c],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onGameResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #onGameResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMount() => super.noSuchMethod(
        Invocation.method(
          #onMount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemove() => super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onParentResize(_i11.Vector2? maxSize) => super.noSuchMethod(
        Invocation.method(
          #onParentResize,
          [maxSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTree(double? dt) => super.noSuchMethod(
        Invocation.method(
          #updateTree,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChildrenChanged(
    _i10.Component? child,
    _i10.ChildrenChangeType? type,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChildrenChanged,
          [
            child,
            type,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FutureOr<void> add(_i10.Component? component) =>
      (super.noSuchMethod(Invocation.method(
        #add,
        [component],
      )) as _i4.FutureOr<void>);

  @override
  _i4.FutureOr<void> addToParent(_i10.Component? parent) =>
      (super.noSuchMethod(Invocation.method(
        #addToParent,
        [parent],
      )) as _i4.FutureOr<void>);

  @override
  _i4.Future<void> addAll(Iterable<_i10.Component>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [components],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void remove(_i10.Component? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromParent() => super.noSuchMethod(
        Invocation.method(
          #removeFromParent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(Iterable<_i10.Component>? components) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [components],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i10.Component)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i10.Component> componentsAtPoint(
    _i11.Vector2? point, [
    List<_i11.Vector2>? nestedPoints,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtPoint,
          [
            point,
            nestedPoints,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> componentsAtLocation<T>(
    T? locationContext,
    List<T>? nestedContexts,
    T? Function(
      _i10.CoordinateTransform,
      T,
    )? transformContext,
    bool Function(
      _i10.Component,
      T,
    )? checkContains,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtLocation,
          [
            locationContext,
            nestedContexts,
            transformContext,
            checkContains,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventAdd(_i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventAdd,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventRemove(
          _i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventRemove,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventMove(
          _i10.Component? newParent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventMove,
          [newParent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  void handleResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #handleResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoaded() => super.noSuchMethod(
        Invocation.method(
          #setLoaded,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMounted() => super.noSuchMethod(
        Invocation.method(
          #setMounted,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRemoved() => super.noSuchMethod(
        Invocation.method(
          #setRemoved,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderDebugMode(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderDebugMode,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ComponentsNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockComponentsNotifier<T extends _i10.Component> extends _i1.Mock
    implements _i10.ComponentsNotifier<T> {
  MockComponentsNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<T> get components => (super.noSuchMethod(
        Invocation.getter(#components),
        returnValue: <T>[],
      ) as List<T>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool applicable(_i10.Component? component) => (super.noSuchMethod(
        Invocation.method(
          #applicable,
          [component],
        ),
        returnValue: false,
      ) as bool);

  @override
  void add(T? component) => super.noSuchMethod(
        Invocation.method(
          #add,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(T? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notify() => super.noSuchMethod(
        Invocation.method(
          #notify,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConnectionWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionWrapper extends _i1.Mock implements _i42.ConnectionWrapper {
  MockConnectionWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get hasInternetAddress => (super.noSuchMethod(
        Invocation.getter(#hasInternetAddress),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [ConfettiController].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfettiController extends _i1.Mock
    implements _i17.ConfettiController {
  MockConfettiController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get duration => (super.noSuchMethod(
        Invocation.getter(#duration),
        returnValue: _FakeDuration_27(
          this,
          Invocation.getter(#duration),
        ),
      ) as Duration);

  @override
  set duration(Duration? _duration) => super.noSuchMethod(
        Invocation.setter(
          #duration,
          _duration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i43.ConfettiControllerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i43.ConfettiControllerState.playing,
      ) as _i43.ConfettiControllerState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void play() => super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConfettiWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfettiWrapper extends _i1.Mock implements _i44.ConfettiWrapper {
  MockConfettiWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.ConfettiController newConfettiController(
          {required Duration? duration}) =>
      (super.noSuchMethod(
        Invocation.method(
          #newConfettiController,
          [],
          {#duration: duration},
        ),
        returnValue: _FakeConfettiController_28(
          this,
          Invocation.method(
            #newConfettiController,
            [],
            {#duration: duration},
          ),
        ),
      ) as _i17.ConfettiController);
}

/// A class which mocks [CustomerInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerInfo extends _i1.Mock implements _i19.CustomerInfo {
  MockCustomerInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.EntitlementInfos get entitlements => (super.noSuchMethod(
        Invocation.getter(#entitlements),
        returnValue: _FakeEntitlementInfos_29(
          this,
          Invocation.getter(#entitlements),
        ),
      ) as _i18.EntitlementInfos);

  @override
  Map<String, String?> get allPurchaseDates => (super.noSuchMethod(
        Invocation.getter(#allPurchaseDates),
        returnValue: <String, String?>{},
      ) as Map<String, String?>);

  @override
  List<String> get activeSubscriptions => (super.noSuchMethod(
        Invocation.getter(#activeSubscriptions),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get allPurchasedProductIdentifiers => (super.noSuchMethod(
        Invocation.getter(#allPurchasedProductIdentifiers),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<_i45.StoreTransaction> get nonSubscriptionTransactions =>
      (super.noSuchMethod(
        Invocation.getter(#nonSubscriptionTransactions),
        returnValue: <_i45.StoreTransaction>[],
      ) as List<_i45.StoreTransaction>);

  @override
  String get firstSeen => (super.noSuchMethod(
        Invocation.getter(#firstSeen),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#firstSeen),
        ),
      ) as String);

  @override
  String get originalAppUserId => (super.noSuchMethod(
        Invocation.getter(#originalAppUserId),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#originalAppUserId),
        ),
      ) as String);

  @override
  Map<String, String?> get allExpirationDates => (super.noSuchMethod(
        Invocation.getter(#allExpirationDates),
        returnValue: <String, String?>{},
      ) as Map<String, String?>);

  @override
  String get requestDate => (super.noSuchMethod(
        Invocation.getter(#requestDate),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#requestDate),
        ),
      ) as String);

  @override
  _i19.$CustomerInfoCopyWith<_i19.CustomerInfo> get copyWith =>
      (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$CustomerInfoCopyWith_30<_i19.CustomerInfo>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i19.$CustomerInfoCopyWith<_i19.CustomerInfo>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [DeviceInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoWrapper extends _i1.Mock implements _i46.DeviceInfoWrapper {
  MockDeviceInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
        Invocation.getter(#androidInfo),
        returnValue:
            _i4.Future<_i2.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_31(
          this,
          Invocation.getter(#androidInfo),
        )),
      ) as _i4.Future<_i2.AndroidDeviceInfo>);

  @override
  _i4.Future<_i2.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
        Invocation.getter(#iosInfo),
        returnValue: _i4.Future<_i2.IosDeviceInfo>.value(_FakeIosDeviceInfo_32(
          this,
          Invocation.getter(#iosInfo),
        )),
      ) as _i4.Future<_i2.IosDeviceInfo>);
}

/// A class which mocks [FgbgWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFgbgWrapper extends _i1.Mock implements _i47.FgbgWrapper {
  MockFgbgWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i48.FGBGType> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i48.FGBGType>.empty(),
      ) as _i4.Stream<_i48.FGBGType>);
}

/// A class which mocks [FlameWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlameWrapper extends _i1.Mock implements _i49.FlameWrapper {
  MockFlameWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setPortrait() => (super.noSuchMethod(
        Invocation.method(
          #setPortrait,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLandscape() => (super.noSuchMethod(
        Invocation.method(
          #setLandscape,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setOrientations(
          List<_i37.DeviceOrientation>? orientations) =>
      (super.noSuchMethod(
        Invocation.method(
          #setOrientations,
          [orientations],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i10.Sprite> loadSprite(String? src) => (super.noSuchMethod(
        Invocation.method(
          #loadSprite,
          [src],
        ),
        returnValue: _i4.Future<_i10.Sprite>.value(_FakeSprite_23(
          this,
          Invocation.method(
            #loadSprite,
            [src],
          ),
        )),
      ) as _i4.Future<_i10.Sprite>);
}

/// A class which mocks [FlameAudioWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlameAudioWrapper extends _i1.Mock implements _i50.FlameAudioWrapper {
  MockFlameAudioWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<Uri>> loadAll(List<String>? fileNames) => (super.noSuchMethod(
        Invocation.method(
          #loadAll,
          [fileNames],
        ),
        returnValue: _i4.Future<List<Uri>>.value(<Uri>[]),
      ) as _i4.Future<List<Uri>>);

  @override
  _i4.Future<_i3.AudioPlayer> loop(
    String? file, {
    double? volume = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loop,
          [file],
          {#volume: volume},
        ),
        returnValue: _i4.Future<_i3.AudioPlayer>.value(_FakeAudioPlayer_33(
          this,
          Invocation.method(
            #loop,
            [file],
            {#volume: volume},
          ),
        )),
      ) as _i4.Future<_i3.AudioPlayer>);

  @override
  _i4.Future<_i3.AudioPool> createPool(
    String? sound, {
    required int? maxPlayers,
    int? minPlayers = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPool,
          [sound],
          {
            #maxPlayers: maxPlayers,
            #minPlayers: minPlayers,
          },
        ),
        returnValue: _i4.Future<_i3.AudioPool>.value(_FakeAudioPool_34(
          this,
          Invocation.method(
            #createPool,
            [sound],
            {
              #maxPlayers: maxPlayers,
              #minPlayers: minPlayers,
            },
          ),
        )),
      ) as _i4.Future<_i3.AudioPool>);
}

/// A class which mocks [FlutterView].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterView extends _i1.Mock implements _i8.FlutterView {
  MockFlutterView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get viewId => (super.noSuchMethod(
        Invocation.getter(#viewId),
        returnValue: 0,
      ) as int);

  @override
  _i8.PlatformDispatcher get platformDispatcher => (super.noSuchMethod(
        Invocation.getter(#platformDispatcher),
        returnValue: _FakePlatformDispatcher_35(
          this,
          Invocation.getter(#platformDispatcher),
        ),
      ) as _i8.PlatformDispatcher);

  @override
  _i8.Display get display => (super.noSuchMethod(
        Invocation.getter(#display),
        returnValue: _FakeDisplay_36(
          this,
          Invocation.getter(#display),
        ),
      ) as _i8.Display);

  @override
  double get devicePixelRatio => (super.noSuchMethod(
        Invocation.getter(#devicePixelRatio),
        returnValue: 0.0,
      ) as double);

  @override
  _i8.ViewConstraints get physicalConstraints => (super.noSuchMethod(
        Invocation.getter(#physicalConstraints),
        returnValue: _FakeViewConstraints_37(
          this,
          Invocation.getter(#physicalConstraints),
        ),
      ) as _i8.ViewConstraints);

  @override
  _i8.Size get physicalSize => (super.noSuchMethod(
        Invocation.getter(#physicalSize),
        returnValue: _FakeSize_38(
          this,
          Invocation.getter(#physicalSize),
        ),
      ) as _i8.Size);

  @override
  _i8.ViewPadding get viewInsets => (super.noSuchMethod(
        Invocation.getter(#viewInsets),
        returnValue: _FakeViewPadding_39(
          this,
          Invocation.getter(#viewInsets),
        ),
      ) as _i8.ViewPadding);

  @override
  _i8.ViewPadding get viewPadding => (super.noSuchMethod(
        Invocation.getter(#viewPadding),
        returnValue: _FakeViewPadding_39(
          this,
          Invocation.getter(#viewPadding),
        ),
      ) as _i8.ViewPadding);

  @override
  _i8.ViewPadding get systemGestureInsets => (super.noSuchMethod(
        Invocation.getter(#systemGestureInsets),
        returnValue: _FakeViewPadding_39(
          this,
          Invocation.getter(#systemGestureInsets),
        ),
      ) as _i8.ViewPadding);

  @override
  _i8.ViewPadding get padding => (super.noSuchMethod(
        Invocation.getter(#padding),
        returnValue: _FakeViewPadding_39(
          this,
          Invocation.getter(#padding),
        ),
      ) as _i8.ViewPadding);

  @override
  _i8.GestureSettings get gestureSettings => (super.noSuchMethod(
        Invocation.getter(#gestureSettings),
        returnValue: _FakeGestureSettings_40(
          this,
          Invocation.getter(#gestureSettings),
        ),
      ) as _i8.GestureSettings);

  @override
  List<_i8.DisplayFeature> get displayFeatures => (super.noSuchMethod(
        Invocation.getter(#displayFeatures),
        returnValue: <_i8.DisplayFeature>[],
      ) as List<_i8.DisplayFeature>);

  @override
  void render(
    _i8.Scene? scene, {
    _i8.Size? size,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #render,
          [scene],
          {#size: size},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSemantics(_i8.SemanticsUpdate? update) => super.noSuchMethod(
        Invocation.method(
          #updateSemantics,
          [update],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HttpWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpWrapper extends _i1.Mock implements _i51.HttpWrapper {
  MockHttpWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i20.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i52.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i20.Response>.value(_FakeResponse_41(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i20.Response>);
}

/// A class which mocks [InAppReviewWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockInAppReviewWrapper extends _i1.Mock
    implements _i53.InAppReviewWrapper {
  MockInAppReviewWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isAvailable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> requestReview() => (super.noSuchMethod(
        Invocation.method(
          #requestReview,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LivesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLivesManager extends _i1.Mock implements _i54.LivesManager {
  MockLivesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<dynamic> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  int get lives => (super.noSuchMethod(
        Invocation.getter(#lives),
        returnValue: 0,
      ) as int);

  @override
  bool get canPlay => (super.noSuchMethod(
        Invocation.getter(#canPlay),
        returnValue: false,
      ) as bool);

  @override
  void incLives(int? by) => super.noSuchMethod(
        Invocation.method(
          #incLives,
          [by],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void loseLife() => super.noSuchMethod(
        Invocation.method(
          #loseLife,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rewardWatchedAd(int? reward) => super.noSuchMethod(
        Invocation.method(
          #rewardWatchedAd,
          [reward],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rewardAdError() => super.noSuchMethod(
        Invocation.method(
          #rewardAdError,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Offering].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffering extends _i1.Mock implements _i21.Offering {
  MockOffering() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier => (super.noSuchMethod(
        Invocation.getter(#identifier),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#identifier),
        ),
      ) as String);

  @override
  String get serverDescription => (super.noSuchMethod(
        Invocation.getter(#serverDescription),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#serverDescription),
        ),
      ) as String);

  @override
  Map<String, Object> get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: <String, Object>{},
      ) as Map<String, Object>);

  @override
  List<_i22.Package> get availablePackages => (super.noSuchMethod(
        Invocation.getter(#availablePackages),
        returnValue: <_i22.Package>[],
      ) as List<_i22.Package>);

  @override
  _i21.$OfferingCopyWith<_i21.Offering> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$OfferingCopyWith_42<_i21.Offering>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i21.$OfferingCopyWith<_i21.Offering>);

  @override
  _i22.Package? getPackage(String? identifier) =>
      (super.noSuchMethod(Invocation.method(
        #getPackage,
        [identifier],
      )) as _i22.Package?);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Offerings].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfferings extends _i1.Mock implements _i19.Offerings {
  MockOfferings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i21.Offering> get all => (super.noSuchMethod(
        Invocation.getter(#all),
        returnValue: <String, _i21.Offering>{},
      ) as Map<String, _i21.Offering>);

  @override
  _i19.$OfferingsCopyWith<_i19.Offerings> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$OfferingsCopyWith_43<_i19.Offerings>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i19.$OfferingsCopyWith<_i19.Offerings>);

  @override
  _i21.Offering? getOffering(String? identifier) =>
      (super.noSuchMethod(Invocation.method(
        #getOffering,
        [identifier],
      )) as _i21.Offering?);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [OrientationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrientationManager extends _i1.Mock
    implements _i55.OrientationManager {
  MockOrientationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<dynamic> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  set orientation(_i7.Orientation? orientation) => super.noSuchMethod(
        Invocation.setter(
          #orientation,
          orientation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> lockCurrent() => (super.noSuchMethod(
        Invocation.method(
          #lockCurrent,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Package].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackage extends _i1.Mock implements _i22.Package {
  MockPackage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier => (super.noSuchMethod(
        Invocation.getter(#identifier),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#identifier),
        ),
      ) as String);

  @override
  _i22.PackageType get packageType => (super.noSuchMethod(
        Invocation.getter(#packageType),
        returnValue: _i22.PackageType.unknown,
      ) as _i22.PackageType);

  @override
  _i19.StoreProduct get storeProduct => (super.noSuchMethod(
        Invocation.getter(#storeProduct),
        returnValue: _FakeStoreProduct_44(
          this,
          Invocation.getter(#storeProduct),
        ),
      ) as _i19.StoreProduct);

  @override
  _i19.PresentedOfferingContext get presentedOfferingContext =>
      (super.noSuchMethod(
        Invocation.getter(#presentedOfferingContext),
        returnValue: _FakePresentedOfferingContext_45(
          this,
          Invocation.getter(#presentedOfferingContext),
        ),
      ) as _i19.PresentedOfferingContext);

  @override
  _i22.$PackageCopyWith<_i22.Package> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$PackageCopyWith_46<_i22.Package>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i22.$PackageCopyWith<_i22.Package>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [PackageInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoWrapper extends _i1.Mock
    implements _i56.PackageInfoWrapper {
  MockPackageInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i23.PackageInfo> fromPlatform() => (super.noSuchMethod(
        Invocation.method(
          #fromPlatform,
          [],
        ),
        returnValue: _i4.Future<_i23.PackageInfo>.value(_FakePackageInfo_47(
          this,
          Invocation.method(
            #fromPlatform,
            [],
          ),
        )),
      ) as _i4.Future<_i23.PackageInfo>);
}

/// A class which mocks [PlatformDispatcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformDispatcher extends _i1.Mock
    implements _i8.PlatformDispatcher {
  MockPlatformDispatcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onPlatformConfigurationChanged(_i8.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPlatformConfigurationChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i8.Display> get displays => (super.noSuchMethod(
        Invocation.getter(#displays),
        returnValue: <_i8.Display>[],
      ) as Iterable<_i8.Display>);

  @override
  Iterable<_i8.FlutterView> get views => (super.noSuchMethod(
        Invocation.getter(#views),
        returnValue: <_i8.FlutterView>[],
      ) as Iterable<_i8.FlutterView>);

  @override
  set onMetricsChanged(_i8.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onMetricsChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onViewFocusChange(_i8.ViewFocusChangeCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onViewFocusChange,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onBeginFrame(_i8.FrameCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onBeginFrame,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onDrawFrame(_i8.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onDrawFrame,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onPointerDataPacket(_i8.PointerDataPacketCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPointerDataPacket,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onKeyData(_i8.KeyDataCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onKeyData,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onReportTimings(_i8.TimingsCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onReportTimings,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onPlatformMessage(_i8.PlatformMessageCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPlatformMessage,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.AccessibilityFeatures get accessibilityFeatures => (super.noSuchMethod(
        Invocation.getter(#accessibilityFeatures),
        returnValue: _FakeAccessibilityFeatures_48(
          this,
          Invocation.getter(#accessibilityFeatures),
        ),
      ) as _i8.AccessibilityFeatures);

  @override
  set onAccessibilityFeaturesChanged(_i8.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onAccessibilityFeaturesChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_49(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i8.Locale);

  @override
  List<_i8.Locale> get locales => (super.noSuchMethod(
        Invocation.getter(#locales),
        returnValue: <_i8.Locale>[],
      ) as List<_i8.Locale>);

  @override
  set onLocaleChanged(_i8.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onLocaleChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get initialLifecycleState => (super.noSuchMethod(
        Invocation.getter(#initialLifecycleState),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#initialLifecycleState),
        ),
      ) as String);

  @override
  bool get alwaysUse24HourFormat => (super.noSuchMethod(
        Invocation.getter(#alwaysUse24HourFormat),
        returnValue: false,
      ) as bool);

  @override
  double get textScaleFactor => (super.noSuchMethod(
        Invocation.getter(#textScaleFactor),
        returnValue: 0.0,
      ) as double);

  @override
  set onTextScaleFactorChanged(_i8.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onTextScaleFactorChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get nativeSpellCheckServiceDefined => (super.noSuchMethod(
        Invocation.getter(#nativeSpellCheckServiceDefined),
        returnValue: false,
      ) as bool);

  @override
  bool get supportsShowingSystemContextMenu => (super.noSuchMethod(
        Invocation.getter(#supportsShowingSystemContextMenu),
        returnValue: false,
      ) as bool);

  @override
  bool get brieflyShowPassword => (super.noSuchMethod(
        Invocation.getter(#brieflyShowPassword),
        returnValue: false,
      ) as bool);

  @override
  _i8.Brightness get platformBrightness => (super.noSuchMethod(
        Invocation.getter(#platformBrightness),
        returnValue: _i8.Brightness.dark,
      ) as _i8.Brightness);

  @override
  set onPlatformBrightnessChanged(_i8.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPlatformBrightnessChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onSystemFontFamilyChanged(_i8.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSystemFontFamilyChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get semanticsEnabled => (super.noSuchMethod(
        Invocation.getter(#semanticsEnabled),
        returnValue: false,
      ) as bool);

  @override
  set onSemanticsEnabledChanged(_i8.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSemanticsEnabledChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onSemanticsActionEvent(_i8.SemanticsActionEventCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSemanticsActionEvent,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.FrameData get frameData => (super.noSuchMethod(
        Invocation.getter(#frameData),
        returnValue: _FakeFrameData_50(
          this,
          Invocation.getter(#frameData),
        ),
      ) as _i8.FrameData);

  @override
  set onFrameDataChanged(_i8.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onFrameDataChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(_i8.ErrorCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get defaultRouteName => (super.noSuchMethod(
        Invocation.getter(#defaultRouteName),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#defaultRouteName),
        ),
      ) as String);

  @override
  _i8.FlutterView? view({required int? id}) =>
      (super.noSuchMethod(Invocation.method(
        #view,
        [],
        {#id: id},
      )) as _i8.FlutterView?);

  @override
  void requestViewFocusChange({
    required int? viewId,
    required _i8.ViewFocusState? state,
    required _i8.ViewFocusDirection? direction,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #requestViewFocusChange,
          [],
          {
            #viewId: viewId,
            #state: state,
            #direction: direction,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendPlatformMessage(
    String? name,
    _i34.ByteData? data,
    _i8.PlatformMessageResponseCallback? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #sendPlatformMessage,
          [
            name,
            data,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendPortPlatformMessage(
    String? name,
    _i34.ByteData? data,
    int? identifier,
    _i57.SendPort? port,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #sendPortPlatformMessage,
          [
            name,
            data,
            identifier,
            port,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerBackgroundIsolate(_i8.RootIsolateToken? token) =>
      super.noSuchMethod(
        Invocation.method(
          #registerBackgroundIsolate,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setIsolateDebugName(String? name) => super.noSuchMethod(
        Invocation.method(
          #setIsolateDebugName,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requestDartPerformanceMode(_i8.DartPerformanceMode? mode) =>
      super.noSuchMethod(
        Invocation.method(
          #requestDartPerformanceMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void scheduleFrame() => super.noSuchMethod(
        Invocation.method(
          #scheduleFrame,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void scheduleWarmUpFrame({
    required _i8.VoidCallback? beginFrame,
    required _i8.VoidCallback? drawFrame,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #scheduleWarmUpFrame,
          [],
          {
            #beginFrame: beginFrame,
            #drawFrame: drawFrame,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSemantics(_i8.SemanticsUpdate? update) => super.noSuchMethod(
        Invocation.method(
          #updateSemantics,
          [update],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Locale? computePlatformResolvedLocale(
          List<_i8.Locale>? supportedLocales) =>
      (super.noSuchMethod(Invocation.method(
        #computePlatformResolvedLocale,
        [supportedLocales],
      )) as _i8.Locale?);

  @override
  double scaleFontSize(double? unscaledFontSize) => (super.noSuchMethod(
        Invocation.method(
          #scaleFontSize,
          [unscaledFontSize],
        ),
        returnValue: 0.0,
      ) as double);
}

/// A class which mocks [PlatformDispatcherWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformDispatcherWrapper extends _i1.Mock
    implements _i58.PlatformDispatcherWrapper {
  MockPlatformDispatcherWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Size get displaySize => (super.noSuchMethod(
        Invocation.getter(#displaySize),
        returnValue: _FakeSize_38(
          this,
          Invocation.getter(#displaySize),
        ),
      ) as _i8.Size);

  @override
  double get displayDevicePixelRatio => (super.noSuchMethod(
        Invocation.getter(#displayDevicePixelRatio),
        returnValue: 0.0,
      ) as double);
}

/// A class which mocks [PlatformException].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformException extends _i1.Mock implements _i37.PlatformException {
  MockPlatformException() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get code => (super.noSuchMethod(
        Invocation.getter(#code),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#code),
        ),
      ) as String);
}

/// A class which mocks [PlatformWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformWrapper extends _i1.Mock implements _i59.PlatformWrapper {
  MockPlatformWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);

  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);

  @override
  bool get isDebug => (super.noSuchMethod(
        Invocation.getter(#isDebug),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [PreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceManager extends _i1.Mock implements _i60.PreferenceManager {
  MockPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<String> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<String>.empty(),
      ) as _i4.Stream<String>);

  @override
  int get lives => (super.noSuchMethod(
        Invocation.getter(#lives),
        returnValue: 0,
      ) as int);

  @override
  set lives(int? value) => super.noSuchMethod(
        Invocation.setter(
          #lives,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Difficulty get difficulty => (super.noSuchMethod(
        Invocation.getter(#difficulty),
        returnValue: _i24.Difficulty.kids,
      ) as _i24.Difficulty);

  @override
  set difficulty(_i24.Difficulty? value) => super.noSuchMethod(
        Invocation.setter(
          #difficulty,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set colorIndex(int? value) => super.noSuchMethod(
        Invocation.setter(
          #colorIndex,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userName(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userName,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userEmail(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userEmail,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSoundOn => (super.noSuchMethod(
        Invocation.getter(#isSoundOn),
        returnValue: false,
      ) as bool);

  @override
  set isSoundOn(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isSoundOn,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isMusicOn => (super.noSuchMethod(
        Invocation.getter(#isMusicOn),
        returnValue: false,
      ) as bool);

  @override
  set isMusicOn(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isMusicOn,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isFpsOn => (super.noSuchMethod(
        Invocation.getter(#isFpsOn),
        returnValue: false,
      ) as bool);

  @override
  set isFpsOn(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isFpsOn,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<int, _i24.DifficultyStats> get difficultyStats => (super.noSuchMethod(
        Invocation.getter(#difficultyStats),
        returnValue: <int, _i24.DifficultyStats>{},
      ) as Map<int, _i24.DifficultyStats>);

  @override
  set difficultyStats(Map<int, _i24.DifficultyStats>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #difficultyStats,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get didOnboard => (super.noSuchMethod(
        Invocation.getter(#didOnboard),
        returnValue: false,
      ) as bool);

  @override
  set didOnboard(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #didOnboard,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void clearLives() => super.noSuchMethod(
        Invocation.method(
          #clearLives,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PropertiesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertiesManager extends _i1.Mock implements _i61.PropertiesManager {
  MockPropertiesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get adRewardedUnitIdIos => (super.noSuchMethod(
        Invocation.getter(#adRewardedUnitIdIos),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#adRewardedUnitIdIos),
        ),
      ) as String);

  @override
  String get adRewardedUnitIdAndroid => (super.noSuchMethod(
        Invocation.getter(#adRewardedUnitIdAndroid),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#adRewardedUnitIdAndroid),
        ),
      ) as String);

  @override
  String get adBannerUnitIdIos => (super.noSuchMethod(
        Invocation.getter(#adBannerUnitIdIos),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#adBannerUnitIdIos),
        ),
      ) as String);

  @override
  String get adBannerUnitIdAndroid => (super.noSuchMethod(
        Invocation.getter(#adBannerUnitIdAndroid),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#adBannerUnitIdAndroid),
        ),
      ) as String);

  @override
  String get revenueCatKeyApple => (super.noSuchMethod(
        Invocation.getter(#revenueCatKeyApple),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#revenueCatKeyApple),
        ),
      ) as String);

  @override
  String get revenueCatKeyAndroid => (super.noSuchMethod(
        Invocation.getter(#revenueCatKeyAndroid),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#revenueCatKeyAndroid),
        ),
      ) as String);

  @override
  String get supportEmail => (super.noSuchMethod(
        Invocation.getter(#supportEmail),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#supportEmail),
        ),
      ) as String);

  @override
  String get sendGridApiKey => (super.noSuchMethod(
        Invocation.getter(#sendGridApiKey),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#sendGridApiKey),
        ),
      ) as String);

  @override
  String get clientSenderEmail => (super.noSuchMethod(
        Invocation.getter(#clientSenderEmail),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#clientSenderEmail),
        ),
      ) as String);

  @override
  String get feedbackTemplate => (super.noSuchMethod(
        Invocation.getter(#feedbackTemplate),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#feedbackTemplate),
        ),
      ) as String);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PurchasesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchasesManager extends _i1.Mock implements _i62.PurchasesManager {
  MockPurchasesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i19.CustomerInfo?> purchase(_i22.Package? package) =>
      (super.noSuchMethod(
        Invocation.method(
          #purchase,
          [package],
        ),
        returnValue: _i4.Future<_i19.CustomerInfo?>.value(),
      ) as _i4.Future<_i19.CustomerInfo?>);

  @override
  _i4.Future<String> userId() => (super.noSuchMethod(
        Invocation.method(
          #userId,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i32.dummyValue<String>(
          this,
          Invocation.method(
            #userId,
            [],
          ),
        )),
      ) as _i4.Future<String>);
}

/// A class which mocks [PurchasesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchasesWrapper extends _i1.Mock implements _i63.PurchasesWrapper {
  MockPurchasesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> configure(_i19.PurchasesConfiguration? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #configure,
          [config],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLogLevel(_i64.LogLevel? logLevel) => (super.noSuchMethod(
        Invocation.method(
          #setLogLevel,
          [logLevel],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i19.Offerings> getOfferings() => (super.noSuchMethod(
        Invocation.method(
          #getOfferings,
          [],
        ),
        returnValue: _i4.Future<_i19.Offerings>.value(_FakeOfferings_51(
          this,
          Invocation.method(
            #getOfferings,
            [],
          ),
        )),
      ) as _i4.Future<_i19.Offerings>);

  @override
  _i4.Future<_i19.CustomerInfo> getCustomerInfo() => (super.noSuchMethod(
        Invocation.method(
          #getCustomerInfo,
          [],
        ),
        returnValue: _i4.Future<_i19.CustomerInfo>.value(_FakeCustomerInfo_52(
          this,
          Invocation.method(
            #getCustomerInfo,
            [],
          ),
        )),
      ) as _i4.Future<_i19.CustomerInfo>);

  @override
  _i4.Future<_i19.CustomerInfo> purchasePackage(_i22.Package? package) =>
      (super.noSuchMethod(
        Invocation.method(
          #purchasePackage,
          [package],
        ),
        returnValue: _i4.Future<_i19.CustomerInfo>.value(_FakeCustomerInfo_52(
          this,
          Invocation.method(
            #purchasePackage,
            [package],
          ),
        )),
      ) as _i4.Future<_i19.CustomerInfo>);
}

/// A class which mocks [RewardedAd].
///
/// See the documentation for Mockito's code generation for more information.
class MockRewardedAd extends _i1.Mock implements _i5.RewardedAd {
  MockRewardedAd() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.RewardedAdLoadCallback get rewardedAdLoadCallback => (super.noSuchMethod(
        Invocation.getter(#rewardedAdLoadCallback),
        returnValue: _FakeRewardedAdLoadCallback_53(
          this,
          Invocation.getter(#rewardedAdLoadCallback),
        ),
      ) as _i6.RewardedAdLoadCallback);

  @override
  set fullScreenContentCallback(
          _i6.FullScreenContentCallback<_i5.RewardedAd>?
              _fullScreenContentCallback) =>
      super.noSuchMethod(
        Invocation.setter(
          #fullScreenContentCallback,
          _fullScreenContentCallback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onUserEarnedRewardCallback(
          _i6.OnUserEarnedRewardCallback? _onUserEarnedRewardCallback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onUserEarnedRewardCallback,
          _onUserEarnedRewardCallback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onPaidEvent(_i6.OnPaidEventCallback? _onPaidEvent) => super.noSuchMethod(
        Invocation.setter(
          #onPaidEvent,
          _onPaidEvent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get adUnitId => (super.noSuchMethod(
        Invocation.getter(#adUnitId),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#adUnitId),
        ),
      ) as String);

  @override
  set responseInfo(_i5.ResponseInfo? _responseInfo) => super.noSuchMethod(
        Invocation.setter(
          #responseInfo,
          _responseInfo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> show(
          {required _i6.OnUserEarnedRewardCallback? onUserEarnedReward}) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [],
          {#onUserEarnedReward: onUserEarnedReward},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setServerSideOptions(
          _i5.ServerSideVerificationOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #setServerSideOptions,
          [options],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setImmersiveMode(bool? immersiveModeEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setImmersiveMode,
          [immersiveModeEnabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [RewardedAdWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockRewardedAdWrapper extends _i1.Mock implements _i65.RewardedAdWrapper {
  MockRewardedAdWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> load({
    required String? adUnitId,
    required _i5.AdRequest? request,
    required _i6.RewardedAdLoadCallback? rewardedAdLoadCallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
          {
            #adUnitId: adUnitId,
            #request: request,
            #rewardedAdLoadCallback: rewardedAdLoadCallback,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i66.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i4.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Sprite].
///
/// See the documentation for Mockito's code generation for more information.
class MockSprite extends _i1.Mock implements _i10.Sprite {
  MockSprite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Paint get paint => (super.noSuchMethod(
        Invocation.getter(#paint),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.getter(#paint),
        ),
      ) as _i8.Paint);

  @override
  set paint(_i8.Paint? _paint) => super.noSuchMethod(
        Invocation.setter(
          #paint,
          _paint,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Image get image => (super.noSuchMethod(
        Invocation.getter(#image),
        returnValue: _FakeImage_54(
          this,
          Invocation.getter(#image),
        ),
      ) as _i8.Image);

  @override
  set image(_i8.Image? _image) => super.noSuchMethod(
        Invocation.setter(
          #image,
          _image,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Rect get src => (super.noSuchMethod(
        Invocation.getter(#src),
        returnValue: _FakeRect_9(
          this,
          Invocation.getter(#src),
        ),
      ) as _i8.Rect);

  @override
  set src(_i8.Rect? _src) => super.noSuchMethod(
        Invocation.setter(
          #src,
          _src,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get originalSize => (super.noSuchMethod(
        Invocation.getter(#originalSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#originalSize),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get srcSize => (super.noSuchMethod(
        Invocation.getter(#srcSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#srcSize),
        ),
      ) as _i11.Vector2);

  @override
  set srcSize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.setter(
          #srcSize,
          size,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get srcPosition => (super.noSuchMethod(
        Invocation.getter(#srcPosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#srcPosition),
        ),
      ) as _i11.Vector2);

  @override
  set srcPosition(_i11.Vector2? position) => super.noSuchMethod(
        Invocation.setter(
          #srcPosition,
          position,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderRect(
    _i8.Canvas? canvas,
    _i8.Rect? rect, {
    _i8.Paint? overridePaint,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #renderRect,
          [
            canvas,
            rect,
          ],
          {#overridePaint: overridePaint},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(
    _i8.Canvas? canvas, {
    _i11.Vector2? position,
    _i11.Vector2? size,
    _i10.Anchor? anchor = _i10.Anchor.topLeft,
    _i8.Paint? overridePaint,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
          {
            #position: position,
            #size: size,
            #anchor: anchor,
            #overridePaint: overridePaint,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i8.Image> toImage() => (super.noSuchMethod(
        Invocation.method(
          #toImage,
          [],
        ),
        returnValue: _i4.Future<_i8.Image>.value(_FakeImage_54(
          this,
          Invocation.method(
            #toImage,
            [],
          ),
        )),
      ) as _i4.Future<_i8.Image>);

  @override
  _i8.Image toImageSync() => (super.noSuchMethod(
        Invocation.method(
          #toImageSync,
          [],
        ),
        returnValue: _FakeImage_54(
          this,
          Invocation.method(
            #toImageSync,
            [],
          ),
        ),
      ) as _i8.Image);
}

/// A class which mocks [StatsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockStatsManager extends _i1.Mock implements _i67.StatsManager {
  MockStatsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get gamesPlayed => (super.noSuchMethod(
        Invocation.getter(#gamesPlayed),
        returnValue: 0,
      ) as int);

  @override
  _i24.DifficultyStats get currentDifficultyStats => (super.noSuchMethod(
        Invocation.getter(#currentDifficultyStats),
        returnValue: _FakeDifficultyStats_55(
          this,
          Invocation.getter(#currentDifficultyStats),
        ),
      ) as _i24.DifficultyStats);

  @override
  int get currentHighScore => (super.noSuchMethod(
        Invocation.getter(#currentHighScore),
        returnValue: 0,
      ) as int);

  @override
  int get currentGamesPlayed => (super.noSuchMethod(
        Invocation.getter(#currentGamesPlayed),
        returnValue: 0,
      ) as int);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void incCurrentGamesPlayed() => super.noSuchMethod(
        Invocation.method(
          #incCurrentGamesPlayed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateCurrentHighScore(int? newHighScore) => (super.noSuchMethod(
        Invocation.method(
          #updateCurrentHighScore,
          [newHighScore],
        ),
        returnValue: false,
      ) as bool);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StoreProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreProduct extends _i1.Mock implements _i19.StoreProduct {
  MockStoreProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier => (super.noSuchMethod(
        Invocation.getter(#identifier),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#identifier),
        ),
      ) as String);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  double get price => (super.noSuchMethod(
        Invocation.getter(#price),
        returnValue: 0.0,
      ) as double);

  @override
  String get priceString => (super.noSuchMethod(
        Invocation.getter(#priceString),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#priceString),
        ),
      ) as String);

  @override
  String get currencyCode => (super.noSuchMethod(
        Invocation.getter(#currencyCode),
        returnValue: _i32.dummyValue<String>(
          this,
          Invocation.getter(#currencyCode),
        ),
      ) as String);

  @override
  _i19.$StoreProductCopyWith<_i19.StoreProduct> get copyWith =>
      (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$StoreProductCopyWith_56<_i19.StoreProduct>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i19.$StoreProductCopyWith<_i19.StoreProduct>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [TapDownEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockTapDownEvent extends _i1.Mock implements _i68.TapDownEvent {
  MockTapDownEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get pointerId => (super.noSuchMethod(
        Invocation.getter(#pointerId),
        returnValue: 0,
      ) as int);

  @override
  _i8.PointerDeviceKind get deviceKind => (super.noSuchMethod(
        Invocation.getter(#deviceKind),
        returnValue: _i8.PointerDeviceKind.touch,
      ) as _i8.PointerDeviceKind);

  @override
  _i11.Vector2 get devicePosition => (super.noSuchMethod(
        Invocation.getter(#devicePosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#devicePosition),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get canvasPosition => (super.noSuchMethod(
        Invocation.getter(#canvasPosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#canvasPosition),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get localPosition => (super.noSuchMethod(
        Invocation.getter(#localPosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#localPosition),
        ),
      ) as _i11.Vector2);

  @override
  List<_i11.Vector2> get renderingTrace => (super.noSuchMethod(
        Invocation.getter(#renderingTrace),
        returnValue: <_i11.Vector2>[],
      ) as List<_i11.Vector2>);

  @override
  bool get handled => (super.noSuchMethod(
        Invocation.getter(#handled),
        returnValue: false,
      ) as bool);

  @override
  set handled(bool? _handled) => super.noSuchMethod(
        Invocation.setter(
          #handled,
          _handled,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get continuePropagation => (super.noSuchMethod(
        Invocation.getter(#continuePropagation),
        returnValue: false,
      ) as bool);

  @override
  set continuePropagation(bool? _continuePropagation) => super.noSuchMethod(
        Invocation.setter(
          #continuePropagation,
          _continuePropagation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i10.Component> collectApplicableChildren(
          {required _i10.Component? rootComponent}) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectApplicableChildren,
          [],
          {#rootComponent: rootComponent},
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  void deliverAtPoint<T extends _i10.Component>({
    required _i10.Component? rootComponent,
    required void Function(T)? eventHandler,
    bool? deliverToAll = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #deliverAtPoint,
          [],
          {
            #rootComponent: rootComponent,
            #eventHandler: eventHandler,
            #deliverToAll: deliverToAll,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deliverToComponents<T extends _i10.Component>(
    _i10.Component? rootComponent,
    void Function(T)? eventHandler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #deliverToComponents,
          [
            rootComponent,
            eventHandler,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Target].
///
/// See the documentation for Mockito's code generation for more information.
class MockTarget extends _i1.Mock implements _i40.Target {
  MockTarget() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.TargetColor get color => (super.noSuchMethod(
        Invocation.getter(#color),
        returnValue: _FakeTargetColor_25(
          this,
          Invocation.getter(#color),
        ),
      ) as _i16.TargetColor);

  @override
  bool get shrinkToBounds => (super.noSuchMethod(
        Invocation.getter(#shrinkToBounds),
        returnValue: false,
      ) as bool);

  @override
  bool get manuallyPositioned => (super.noSuchMethod(
        Invocation.getter(#manuallyPositioned),
        returnValue: false,
      ) as bool);

  @override
  _i25.UnmodifiableListView<_i11.Vector2> get vertices => (super.noSuchMethod(
        Invocation.getter(#vertices),
        returnValue: _FakeUnmodifiableListView_57<_i11.Vector2>(
          this,
          Invocation.getter(#vertices),
        ),
      ) as _i25.UnmodifiableListView<_i11.Vector2>);

  @override
  bool get renderShape => (super.noSuchMethod(
        Invocation.getter(#renderShape),
        returnValue: false,
      ) as bool);

  @override
  set renderShape(bool? _renderShape) => super.noSuchMethod(
        Invocation.setter(
          #renderShape,
          _renderShape,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSolid => (super.noSuchMethod(
        Invocation.getter(#isSolid),
        returnValue: false,
      ) as bool);

  @override
  set isSolid(bool? _isSolid) => super.noSuchMethod(
        Invocation.setter(
          #isSolid,
          _isSolid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Transform2D get transform => (super.noSuchMethod(
        Invocation.getter(#transform),
        returnValue: _FakeTransform2D_58(
          this,
          Invocation.getter(#transform),
        ),
      ) as _i11.Transform2D);

  @override
  double get nativeAngle => (super.noSuchMethod(
        Invocation.getter(#nativeAngle),
        returnValue: 0.0,
      ) as double);

  @override
  set nativeAngle(double? _nativeAngle) => super.noSuchMethod(
        Invocation.setter(
          #nativeAngle,
          _nativeAngle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Decorator get decorator => (super.noSuchMethod(
        Invocation.getter(#decorator),
        returnValue: _FakeDecorator_59(
          this,
          Invocation.getter(#decorator),
        ),
      ) as _i26.Decorator);

  @override
  set decorator(_i26.Decorator? _decorator) => super.noSuchMethod(
        Invocation.setter(
          #decorator,
          _decorator,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Matrix4 get transformMatrix => (super.noSuchMethod(
        Invocation.getter(#transformMatrix),
        returnValue: _FakeMatrix4_60(
          this,
          Invocation.getter(#transformMatrix),
        ),
      ) as _i7.Matrix4);

  @override
  _i11.NotifyingVector2 get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeNotifyingVector2_61(
          this,
          Invocation.getter(#position),
        ),
      ) as _i11.NotifyingVector2);

  @override
  set position(_i11.Vector2? position) => super.noSuchMethod(
        Invocation.setter(
          #position,
          position,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get x => (super.noSuchMethod(
        Invocation.getter(#x),
        returnValue: 0.0,
      ) as double);

  @override
  set x(double? x) => super.noSuchMethod(
        Invocation.setter(
          #x,
          x,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get y => (super.noSuchMethod(
        Invocation.getter(#y),
        returnValue: 0.0,
      ) as double);

  @override
  set y(double? y) => super.noSuchMethod(
        Invocation.setter(
          #y,
          y,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get angle => (super.noSuchMethod(
        Invocation.getter(#angle),
        returnValue: 0.0,
      ) as double);

  @override
  set angle(double? a) => super.noSuchMethod(
        Invocation.setter(
          #angle,
          a,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.NotifyingVector2 get scale => (super.noSuchMethod(
        Invocation.getter(#scale),
        returnValue: _FakeNotifyingVector2_61(
          this,
          Invocation.getter(#scale),
        ),
      ) as _i11.NotifyingVector2);

  @override
  set scale(_i11.Vector2? scale) => super.noSuchMethod(
        Invocation.setter(
          #scale,
          scale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Anchor get anchor => (super.noSuchMethod(
        Invocation.getter(#anchor),
        returnValue: _FakeAnchor_62(
          this,
          Invocation.getter(#anchor),
        ),
      ) as _i10.Anchor);

  @override
  set anchor(_i10.Anchor? anchor) => super.noSuchMethod(
        Invocation.setter(
          #anchor,
          anchor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.NotifyingVector2 get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeNotifyingVector2_61(
          this,
          Invocation.getter(#size),
        ),
      ) as _i11.NotifyingVector2);

  @override
  set size(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.setter(
          #size,
          size,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0.0,
      ) as double);

  @override
  set width(double? w) => super.noSuchMethod(
        Invocation.setter(
          #width,
          w,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0.0,
      ) as double);

  @override
  set height(double? h) => super.noSuchMethod(
        Invocation.setter(
          #height,
          h,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get scaledSize => (super.noSuchMethod(
        Invocation.getter(#scaledSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#scaledSize),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get absoluteScaledSize => (super.noSuchMethod(
        Invocation.getter(#absoluteScaledSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteScaledSize),
        ),
      ) as _i11.Vector2);

  @override
  double get absoluteAngle => (super.noSuchMethod(
        Invocation.getter(#absoluteAngle),
        returnValue: 0.0,
      ) as double);

  @override
  _i11.Vector2 get absoluteScale => (super.noSuchMethod(
        Invocation.getter(#absoluteScale),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteScale),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get topLeftPosition => (super.noSuchMethod(
        Invocation.getter(#topLeftPosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#topLeftPosition),
        ),
      ) as _i11.Vector2);

  @override
  set topLeftPosition(_i11.Vector2? point) => super.noSuchMethod(
        Invocation.setter(
          #topLeftPosition,
          point,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get center => (super.noSuchMethod(
        Invocation.getter(#center),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#center),
        ),
      ) as _i11.Vector2);

  @override
  set center(_i11.Vector2? point) => super.noSuchMethod(
        Invocation.setter(
          #center,
          point,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get absolutePosition => (super.noSuchMethod(
        Invocation.getter(#absolutePosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absolutePosition),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get absoluteTopLeftPosition => (super.noSuchMethod(
        Invocation.getter(#absoluteTopLeftPosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteTopLeftPosition),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get absoluteCenter => (super.noSuchMethod(
        Invocation.getter(#absoluteCenter),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteCenter),
        ),
      ) as _i11.Vector2);

  @override
  bool get isFlippedHorizontally => (super.noSuchMethod(
        Invocation.getter(#isFlippedHorizontally),
        returnValue: false,
      ) as bool);

  @override
  bool get isFlippedVertically => (super.noSuchMethod(
        Invocation.getter(#isFlippedVertically),
        returnValue: false,
      ) as bool);

  @override
  bool get debugMode => (super.noSuchMethod(
        Invocation.getter(#debugMode),
        returnValue: false,
      ) as bool);

  @override
  set debugMode(bool? _debugMode) => super.noSuchMethod(
        Invocation.setter(
          #debugMode,
          _debugMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugCoordinatesPrecision(int? _debugCoordinatesPrecision) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCoordinatesPrecision,
          _debugCoordinatesPrecision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Color get debugColor => (super.noSuchMethod(
        Invocation.getter(#debugColor),
        returnValue: _FakeColor_13(
          this,
          Invocation.getter(#debugColor),
        ),
      ) as _i8.Color);

  @override
  set debugColor(_i8.Color? _debugColor) => super.noSuchMethod(
        Invocation.setter(
          #debugColor,
          _debugColor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounting => (super.noSuchMethod(
        Invocation.getter(#isMounting),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounted => (super.noSuchMethod(
        Invocation.getter(#isMounted),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoving => (super.noSuchMethod(
        Invocation.getter(#isRemoving),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoved => (super.noSuchMethod(
        Invocation.getter(#isRemoved),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  set parent(_i10.Component? newParent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          newParent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.getter(#children),
        ),
      ) as _i10.ComponentSet);

  @override
  bool get hasChildren => (super.noSuchMethod(
        Invocation.getter(#hasChildren),
        returnValue: false,
      ) as bool);

  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
      ) as int);

  @override
  set priority(int? newPriority) => super.noSuchMethod(
        Invocation.setter(
          #priority,
          newPriority,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Paint get debugPaint => (super.noSuchMethod(
        Invocation.getter(#debugPaint),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.getter(#debugPaint),
        ),
      ) as _i8.Paint);

  @override
  _i11.TextPaint get debugTextPaint => (super.noSuchMethod(
        Invocation.getter(#debugTextPaint),
        returnValue: _FakeTextPaint_15(
          this,
          Invocation.getter(#debugTextPaint),
        ),
      ) as _i11.TextPaint);

  @override
  _i8.Paint get paint => (super.noSuchMethod(
        Invocation.getter(#paint),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.getter(#paint),
        ),
      ) as _i8.Paint);

  @override
  set paint(_i8.Paint? _paint) => super.noSuchMethod(
        Invocation.setter(
          #paint,
          _paint,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set paintLayersInternal(List<_i8.Paint>? _paintLayersInternal) =>
      super.noSuchMethod(
        Invocation.setter(
          #paintLayersInternal,
          _paintLayersInternal,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.Paint> get paintLayers => (super.noSuchMethod(
        Invocation.getter(#paintLayers),
        returnValue: <_i8.Paint>[],
      ) as List<_i8.Paint>);

  @override
  set paintLayers(List<_i8.Paint>? paintLayers) => super.noSuchMethod(
        Invocation.setter(
          #paintLayers,
          paintLayers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasPaintLayers => (super.noSuchMethod(
        Invocation.getter(#hasPaintLayers),
        returnValue: false,
      ) as bool);

  @override
  double get opacity => (super.noSuchMethod(
        Invocation.getter(#opacity),
        returnValue: 0.0,
      ) as double);

  @override
  set opacity(double? value) => super.noSuchMethod(
        Invocation.setter(
          #opacity,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i27.TapdGame get game => (super.noSuchMethod(
        Invocation.getter(#game),
        returnValue: _FakeTapdGame_63(
          this,
          Invocation.getter(#game),
        ),
      ) as _i27.TapdGame);

  @override
  set game(_i27.TapdGame? value) => super.noSuchMethod(
        Invocation.setter(
          #game,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i27.TapdGame get gameRef => (super.noSuchMethod(
        Invocation.getter(#gameRef),
        returnValue: _FakeTapdGame_63(
          this,
          Invocation.getter(#gameRef),
        ),
      ) as _i27.TapdGame);

  @override
  _i9.TapdWorld get world => (super.noSuchMethod(
        Invocation.getter(#world),
        returnValue: _FakeTapdWorld_10(
          this,
          Invocation.getter(#world),
        ),
      ) as _i9.TapdWorld);

  @override
  set world(_i9.TapdWorld? value) => super.noSuchMethod(
        Invocation.setter(
          #world,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTapDown(_i68.TapDownEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onTapDown,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update(double? dt) => super.noSuchMethod(
        Invocation.method(
          #update,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pulse() => super.noSuchMethod(
        Invocation.method(
          #pulse,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshVertices({
    required List<_i11.Vector2>? newVertices,
    bool? shrinkToBoundsOverride,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #refreshVertices,
          [],
          {
            #newVertices: newVertices,
            #shrinkToBoundsOverride: shrinkToBoundsOverride,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i11.Vector2> globalVertices() => (super.noSuchMethod(
        Invocation.method(
          #globalVertices,
          [],
        ),
        returnValue: <_i11.Vector2>[],
      ) as List<_i11.Vector2>);

  @override
  void render(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderDebugMode(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderDebugMode,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool containsLocalPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsLocalPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<_i28.LineSegment> possibleIntersectionVertices(_i8.Rect? rect) =>
      (super.noSuchMethod(
        Invocation.method(
          #possibleIntersectionVertices,
          [rect],
        ),
        returnValue: <_i28.LineSegment>[],
      ) as List<_i28.LineSegment>);

  @override
  _i28.LineSegment getEdge(
    int? i, {
    required List<_i11.Vector2>? vertices,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEdge,
          [i],
          {#vertices: vertices},
        ),
        returnValue: _FakeLineSegment_64(
          this,
          Invocation.method(
            #getEdge,
            [i],
            {#vertices: vertices},
          ),
        ),
      ) as _i28.LineSegment);

  @override
  _i11.Vector2 getVertex(
    int? i, {
    List<_i11.Vector2>? vertices,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVertex,
          [i],
          {#vertices: vertices},
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #getVertex,
            [i],
            {#vertices: vertices},
          ),
        ),
      ) as _i11.Vector2);

  @override
  double distance(_i10.PositionComponent? other) => (super.noSuchMethod(
        Invocation.method(
          #distance,
          [other],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i11.Vector2 parentToLocal(
    _i11.Vector2? point, {
    _i11.Vector2? output,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #parentToLocal,
          [point],
          {#output: output},
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #parentToLocal,
            [point],
            {#output: output},
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 localToParent(
    _i11.Vector2? point, {
    _i11.Vector2? output,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #localToParent,
          [point],
          {#output: output},
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #localToParent,
            [point],
            {#output: output},
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 positionOf(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #positionOf,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #positionOf,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 positionOfAnchor(_i10.Anchor? anchor) => (super.noSuchMethod(
        Invocation.method(
          #positionOfAnchor,
          [anchor],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #positionOfAnchor,
            [anchor],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 absolutePositionOf(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #absolutePositionOf,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #absolutePositionOf,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 absolutePositionOfAnchor(_i10.Anchor? anchor) =>
      (super.noSuchMethod(
        Invocation.method(
          #absolutePositionOfAnchor,
          [anchor],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #absolutePositionOfAnchor,
            [anchor],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 toLocal(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #toLocal,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #toLocal,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 absoluteToLocal(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #absoluteToLocal,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #absoluteToLocal,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  double angleTo(_i11.Vector2? target) => (super.noSuchMethod(
        Invocation.method(
          #angleTo,
          [target],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  void lookAt(_i11.Vector2? target) => super.noSuchMethod(
        Invocation.method(
          #lookAt,
          [target],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipHorizontally() => super.noSuchMethod(
        Invocation.method(
          #flipHorizontally,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipVertically() => super.noSuchMethod(
        Invocation.method(
          #flipVertically,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipHorizontallyAroundCenter() => super.noSuchMethod(
        Invocation.method(
          #flipHorizontallyAroundCenter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipVerticallyAroundCenter() => super.noSuchMethod(
        Invocation.method(
          #flipVerticallyAroundCenter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderTree(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderTree,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Rect toRect() => (super.noSuchMethod(
        Invocation.method(
          #toRect,
          [],
        ),
        returnValue: _FakeRect_9(
          this,
          Invocation.method(
            #toRect,
            [],
          ),
        ),
      ) as _i8.Rect);

  @override
  _i8.Rect toAbsoluteRect() => (super.noSuchMethod(
        Invocation.method(
          #toAbsoluteRect,
          [],
        ),
        returnValue: _FakeRect_9(
          this,
          Invocation.method(
            #toAbsoluteRect,
            [],
          ),
        ),
      ) as _i8.Rect);

  @override
  void setByRect(_i8.Rect? rect) => super.noSuchMethod(
        Invocation.method(
          #setByRect,
          [rect],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet createComponentSet() => (super.noSuchMethod(
        Invocation.method(
          #createComponentSet,
          [],
        ),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.method(
            #createComponentSet,
            [],
          ),
        ),
      ) as _i10.ComponentSet);

  @override
  T? findParent<T extends _i10.Component>({bool? includeSelf = false}) =>
      (super.noSuchMethod(Invocation.method(
        #findParent,
        [],
        {#includeSelf: includeSelf},
      )) as T?);

  @override
  Iterable<_i10.Component> ancestors({bool? includeSelf = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #ancestors,
          [],
          {#includeSelf: includeSelf},
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> descendants({
    bool? includeSelf = false,
    bool? reversed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #descendants,
          [],
          {
            #includeSelf: includeSelf,
            #reversed: reversed,
          },
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  bool propagateToChildren<T extends _i10.Component>(
    bool Function(T)? handler, {
    bool? includeSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #propagateToChildren,
          [handler],
          {#includeSelf: includeSelf},
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(_i10.Component? c) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [c],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onGameResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #onGameResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMount() => super.noSuchMethod(
        Invocation.method(
          #onMount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemove() => super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onParentResize(_i11.Vector2? maxSize) => super.noSuchMethod(
        Invocation.method(
          #onParentResize,
          [maxSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTree(double? dt) => super.noSuchMethod(
        Invocation.method(
          #updateTree,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChildrenChanged(
    _i10.Component? child,
    _i10.ChildrenChangeType? type,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChildrenChanged,
          [
            child,
            type,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FutureOr<void> add(_i10.Component? component) =>
      (super.noSuchMethod(Invocation.method(
        #add,
        [component],
      )) as _i4.FutureOr<void>);

  @override
  _i4.FutureOr<void> addToParent(_i10.Component? parent) =>
      (super.noSuchMethod(Invocation.method(
        #addToParent,
        [parent],
      )) as _i4.FutureOr<void>);

  @override
  _i4.Future<void> addAll(Iterable<_i10.Component>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [components],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void remove(_i10.Component? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromParent() => super.noSuchMethod(
        Invocation.method(
          #removeFromParent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(Iterable<_i10.Component>? components) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [components],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i10.Component)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i10.Component> componentsAtPoint(
    _i11.Vector2? point, [
    List<_i11.Vector2>? nestedPoints,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtPoint,
          [
            point,
            nestedPoints,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> componentsAtLocation<T>(
    T? locationContext,
    List<T>? nestedContexts,
    T? Function(
      _i10.CoordinateTransform,
      T,
    )? transformContext,
    bool Function(
      _i10.Component,
      T,
    )? checkContains,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtLocation,
          [
            locationContext,
            nestedContexts,
            transformContext,
            checkContains,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventAdd(_i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventAdd,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventRemove(
          _i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventRemove,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventMove(
          _i10.Component? newParent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventMove,
          [newParent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  void handleResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #handleResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoaded() => super.noSuchMethod(
        Invocation.method(
          #setLoaded,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMounted() => super.noSuchMethod(
        Invocation.method(
          #setMounted,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRemoved() => super.noSuchMethod(
        Invocation.method(
          #setRemoved,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Paint getPaint([Object? paintId]) => (super.noSuchMethod(
        Invocation.method(
          #getPaint,
          [paintId],
        ),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.method(
            #getPaint,
            [paintId],
          ),
        ),
      ) as _i8.Paint);

  @override
  void setPaint(
    Object? paintId,
    _i8.Paint? paint,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setPaint,
          [
            paintId,
            paint,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deletePaint(Object? paintId) => super.noSuchMethod(
        Invocation.method(
          #deletePaint,
          [paintId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void makeTransparent({Object? paintId}) => super.noSuchMethod(
        Invocation.method(
          #makeTransparent,
          [],
          {#paintId: paintId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void makeOpaque({Object? paintId}) => super.noSuchMethod(
        Invocation.method(
          #makeOpaque,
          [],
          {#paintId: paintId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOpacity(
    double? opacity, {
    Object? paintId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setOpacity,
          [opacity],
          {#paintId: paintId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  double getOpacity({Object? paintId}) => (super.noSuchMethod(
        Invocation.method(
          #getOpacity,
          [],
          {#paintId: paintId},
        ),
        returnValue: 0.0,
      ) as double);

  @override
  void setAlpha(
    int? alpha, {
    Object? paintId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setAlpha,
          [alpha],
          {#paintId: paintId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getAlpha({Object? paintId}) => (super.noSuchMethod(
        Invocation.method(
          #getAlpha,
          [],
          {#paintId: paintId},
        ),
        returnValue: 0,
      ) as int);

  @override
  void setColor(
    _i8.Color? color, {
    Object? paintId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setColor,
          [color],
          {#paintId: paintId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void tint(
    _i8.Color? color, {
    Object? paintId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #tint,
          [color],
          {#paintId: paintId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i29.OpacityProvider opacityProviderOf(Object? paintId) =>
      (super.noSuchMethod(
        Invocation.method(
          #opacityProviderOf,
          [paintId],
        ),
        returnValue: _FakeOpacityProvider_65(
          this,
          Invocation.method(
            #opacityProviderOf,
            [paintId],
          ),
        ),
      ) as _i29.OpacityProvider);

  @override
  _i29.OpacityProvider opacityProviderOfList({
    List<Object?>? paintIds,
    bool? includeLayers = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #opacityProviderOfList,
          [],
          {
            #paintIds: paintIds,
            #includeLayers: includeLayers,
          },
        ),
        returnValue: _FakeOpacityProvider_65(
          this,
          Invocation.method(
            #opacityProviderOfList,
            [],
            {
              #paintIds: paintIds,
              #includeLayers: includeLayers,
            },
          ),
        ),
      ) as _i29.OpacityProvider);

  @override
  void onLongTapDown(_i68.TapDownEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onLongTapDown,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTapUp(_i69.TapUpEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onTapUp,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTapCancel(_i70.TapCancelEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onTapCancel,
          [event],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TargetBoard].
///
/// See the documentation for Mockito's code generation for more information.
class MockTargetBoard extends _i1.Mock implements _i41.TargetBoard {
  MockTargetBoard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.ComponentKey get otherBoardKey => (super.noSuchMethod(
        Invocation.getter(#otherBoardKey),
        returnValue: _FakeComponentKey_66(
          this,
          Invocation.getter(#otherBoardKey),
        ),
      ) as _i10.ComponentKey);

  @override
  double get verticalStartFactor => (super.noSuchMethod(
        Invocation.getter(#verticalStartFactor),
        returnValue: 0.0,
      ) as double);

  @override
  bool get isUpdater => (super.noSuchMethod(
        Invocation.getter(#isUpdater),
        returnValue: false,
      ) as bool);

  @override
  _i11.Transform2D get transform => (super.noSuchMethod(
        Invocation.getter(#transform),
        returnValue: _FakeTransform2D_58(
          this,
          Invocation.getter(#transform),
        ),
      ) as _i11.Transform2D);

  @override
  double get nativeAngle => (super.noSuchMethod(
        Invocation.getter(#nativeAngle),
        returnValue: 0.0,
      ) as double);

  @override
  set nativeAngle(double? _nativeAngle) => super.noSuchMethod(
        Invocation.setter(
          #nativeAngle,
          _nativeAngle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Decorator get decorator => (super.noSuchMethod(
        Invocation.getter(#decorator),
        returnValue: _FakeDecorator_59(
          this,
          Invocation.getter(#decorator),
        ),
      ) as _i26.Decorator);

  @override
  set decorator(_i26.Decorator? _decorator) => super.noSuchMethod(
        Invocation.setter(
          #decorator,
          _decorator,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Matrix4 get transformMatrix => (super.noSuchMethod(
        Invocation.getter(#transformMatrix),
        returnValue: _FakeMatrix4_60(
          this,
          Invocation.getter(#transformMatrix),
        ),
      ) as _i7.Matrix4);

  @override
  _i11.NotifyingVector2 get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeNotifyingVector2_61(
          this,
          Invocation.getter(#position),
        ),
      ) as _i11.NotifyingVector2);

  @override
  set position(_i11.Vector2? position) => super.noSuchMethod(
        Invocation.setter(
          #position,
          position,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get x => (super.noSuchMethod(
        Invocation.getter(#x),
        returnValue: 0.0,
      ) as double);

  @override
  set x(double? x) => super.noSuchMethod(
        Invocation.setter(
          #x,
          x,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get y => (super.noSuchMethod(
        Invocation.getter(#y),
        returnValue: 0.0,
      ) as double);

  @override
  set y(double? y) => super.noSuchMethod(
        Invocation.setter(
          #y,
          y,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get angle => (super.noSuchMethod(
        Invocation.getter(#angle),
        returnValue: 0.0,
      ) as double);

  @override
  set angle(double? a) => super.noSuchMethod(
        Invocation.setter(
          #angle,
          a,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.NotifyingVector2 get scale => (super.noSuchMethod(
        Invocation.getter(#scale),
        returnValue: _FakeNotifyingVector2_61(
          this,
          Invocation.getter(#scale),
        ),
      ) as _i11.NotifyingVector2);

  @override
  set scale(_i11.Vector2? scale) => super.noSuchMethod(
        Invocation.setter(
          #scale,
          scale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Anchor get anchor => (super.noSuchMethod(
        Invocation.getter(#anchor),
        returnValue: _FakeAnchor_62(
          this,
          Invocation.getter(#anchor),
        ),
      ) as _i10.Anchor);

  @override
  set anchor(_i10.Anchor? anchor) => super.noSuchMethod(
        Invocation.setter(
          #anchor,
          anchor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.NotifyingVector2 get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeNotifyingVector2_61(
          this,
          Invocation.getter(#size),
        ),
      ) as _i11.NotifyingVector2);

  @override
  set size(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.setter(
          #size,
          size,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0.0,
      ) as double);

  @override
  set width(double? w) => super.noSuchMethod(
        Invocation.setter(
          #width,
          w,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0.0,
      ) as double);

  @override
  set height(double? h) => super.noSuchMethod(
        Invocation.setter(
          #height,
          h,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get scaledSize => (super.noSuchMethod(
        Invocation.getter(#scaledSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#scaledSize),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get absoluteScaledSize => (super.noSuchMethod(
        Invocation.getter(#absoluteScaledSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteScaledSize),
        ),
      ) as _i11.Vector2);

  @override
  double get absoluteAngle => (super.noSuchMethod(
        Invocation.getter(#absoluteAngle),
        returnValue: 0.0,
      ) as double);

  @override
  _i11.Vector2 get absoluteScale => (super.noSuchMethod(
        Invocation.getter(#absoluteScale),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteScale),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get topLeftPosition => (super.noSuchMethod(
        Invocation.getter(#topLeftPosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#topLeftPosition),
        ),
      ) as _i11.Vector2);

  @override
  set topLeftPosition(_i11.Vector2? point) => super.noSuchMethod(
        Invocation.setter(
          #topLeftPosition,
          point,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get center => (super.noSuchMethod(
        Invocation.getter(#center),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#center),
        ),
      ) as _i11.Vector2);

  @override
  set center(_i11.Vector2? point) => super.noSuchMethod(
        Invocation.setter(
          #center,
          point,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get absolutePosition => (super.noSuchMethod(
        Invocation.getter(#absolutePosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absolutePosition),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get absoluteTopLeftPosition => (super.noSuchMethod(
        Invocation.getter(#absoluteTopLeftPosition),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteTopLeftPosition),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get absoluteCenter => (super.noSuchMethod(
        Invocation.getter(#absoluteCenter),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#absoluteCenter),
        ),
      ) as _i11.Vector2);

  @override
  bool get isFlippedHorizontally => (super.noSuchMethod(
        Invocation.getter(#isFlippedHorizontally),
        returnValue: false,
      ) as bool);

  @override
  bool get isFlippedVertically => (super.noSuchMethod(
        Invocation.getter(#isFlippedVertically),
        returnValue: false,
      ) as bool);

  @override
  bool get debugMode => (super.noSuchMethod(
        Invocation.getter(#debugMode),
        returnValue: false,
      ) as bool);

  @override
  set debugMode(bool? _debugMode) => super.noSuchMethod(
        Invocation.setter(
          #debugMode,
          _debugMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugCoordinatesPrecision(int? _debugCoordinatesPrecision) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCoordinatesPrecision,
          _debugCoordinatesPrecision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Color get debugColor => (super.noSuchMethod(
        Invocation.getter(#debugColor),
        returnValue: _FakeColor_13(
          this,
          Invocation.getter(#debugColor),
        ),
      ) as _i8.Color);

  @override
  set debugColor(_i8.Color? _debugColor) => super.noSuchMethod(
        Invocation.setter(
          #debugColor,
          _debugColor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounting => (super.noSuchMethod(
        Invocation.getter(#isMounting),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounted => (super.noSuchMethod(
        Invocation.getter(#isMounted),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoving => (super.noSuchMethod(
        Invocation.getter(#isRemoving),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoved => (super.noSuchMethod(
        Invocation.getter(#isRemoved),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  set parent(_i10.Component? newParent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          newParent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.getter(#children),
        ),
      ) as _i10.ComponentSet);

  @override
  bool get hasChildren => (super.noSuchMethod(
        Invocation.getter(#hasChildren),
        returnValue: false,
      ) as bool);

  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
      ) as int);

  @override
  set priority(int? newPriority) => super.noSuchMethod(
        Invocation.setter(
          #priority,
          newPriority,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Paint get debugPaint => (super.noSuchMethod(
        Invocation.getter(#debugPaint),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.getter(#debugPaint),
        ),
      ) as _i8.Paint);

  @override
  _i11.TextPaint get debugTextPaint => (super.noSuchMethod(
        Invocation.getter(#debugTextPaint),
        returnValue: _FakeTextPaint_15(
          this,
          Invocation.getter(#debugTextPaint),
        ),
      ) as _i11.TextPaint);

  @override
  _i11.FlameGame<_i10.World> get game => (super.noSuchMethod(
        Invocation.getter(#game),
        returnValue: _FakeFlameGame_26<_i10.World>(
          this,
          Invocation.getter(#game),
        ),
      ) as _i11.FlameGame<_i10.World>);

  @override
  set game(_i11.FlameGame<_i10.World>? value) => super.noSuchMethod(
        Invocation.setter(
          #game,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.FlameGame<_i10.World> get gameRef => (super.noSuchMethod(
        Invocation.getter(#gameRef),
        returnValue: _FakeFlameGame_26<_i10.World>(
          this,
          Invocation.getter(#gameRef),
        ),
      ) as _i11.FlameGame<_i10.World>);

  @override
  _i9.TapdWorld get world => (super.noSuchMethod(
        Invocation.getter(#world),
        returnValue: _FakeTapdWorld_10(
          this,
          Invocation.getter(#world),
        ),
      ) as _i9.TapdWorld);

  @override
  set world(_i9.TapdWorld? value) => super.noSuchMethod(
        Invocation.setter(
          #world,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemove() => super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update(double? dt) => super.noSuchMethod(
        Invocation.method(
          #update,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetForNewGame() => super.noSuchMethod(
        Invocation.method(
          #resetForNewGame,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  double distance(_i10.PositionComponent? other) => (super.noSuchMethod(
        Invocation.method(
          #distance,
          [other],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool containsLocalPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsLocalPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool containsPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i11.Vector2 parentToLocal(
    _i11.Vector2? point, {
    _i11.Vector2? output,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #parentToLocal,
          [point],
          {#output: output},
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #parentToLocal,
            [point],
            {#output: output},
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 localToParent(
    _i11.Vector2? point, {
    _i11.Vector2? output,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #localToParent,
          [point],
          {#output: output},
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #localToParent,
            [point],
            {#output: output},
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 positionOf(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #positionOf,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #positionOf,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 positionOfAnchor(_i10.Anchor? anchor) => (super.noSuchMethod(
        Invocation.method(
          #positionOfAnchor,
          [anchor],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #positionOfAnchor,
            [anchor],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 absolutePositionOf(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #absolutePositionOf,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #absolutePositionOf,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 absolutePositionOfAnchor(_i10.Anchor? anchor) =>
      (super.noSuchMethod(
        Invocation.method(
          #absolutePositionOfAnchor,
          [anchor],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #absolutePositionOfAnchor,
            [anchor],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 toLocal(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #toLocal,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #toLocal,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 absoluteToLocal(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #absoluteToLocal,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #absoluteToLocal,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  double angleTo(_i11.Vector2? target) => (super.noSuchMethod(
        Invocation.method(
          #angleTo,
          [target],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  void lookAt(_i11.Vector2? target) => super.noSuchMethod(
        Invocation.method(
          #lookAt,
          [target],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipHorizontally() => super.noSuchMethod(
        Invocation.method(
          #flipHorizontally,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipVertically() => super.noSuchMethod(
        Invocation.method(
          #flipVertically,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipHorizontallyAroundCenter() => super.noSuchMethod(
        Invocation.method(
          #flipHorizontallyAroundCenter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flipVerticallyAroundCenter() => super.noSuchMethod(
        Invocation.method(
          #flipVerticallyAroundCenter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderDebugMode(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderDebugMode,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderTree(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderTree,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Rect toRect() => (super.noSuchMethod(
        Invocation.method(
          #toRect,
          [],
        ),
        returnValue: _FakeRect_9(
          this,
          Invocation.method(
            #toRect,
            [],
          ),
        ),
      ) as _i8.Rect);

  @override
  _i8.Rect toAbsoluteRect() => (super.noSuchMethod(
        Invocation.method(
          #toAbsoluteRect,
          [],
        ),
        returnValue: _FakeRect_9(
          this,
          Invocation.method(
            #toAbsoluteRect,
            [],
          ),
        ),
      ) as _i8.Rect);

  @override
  void setByRect(_i8.Rect? rect) => super.noSuchMethod(
        Invocation.method(
          #setByRect,
          [rect],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet createComponentSet() => (super.noSuchMethod(
        Invocation.method(
          #createComponentSet,
          [],
        ),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.method(
            #createComponentSet,
            [],
          ),
        ),
      ) as _i10.ComponentSet);

  @override
  T? findParent<T extends _i10.Component>({bool? includeSelf = false}) =>
      (super.noSuchMethod(Invocation.method(
        #findParent,
        [],
        {#includeSelf: includeSelf},
      )) as T?);

  @override
  Iterable<_i10.Component> ancestors({bool? includeSelf = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #ancestors,
          [],
          {#includeSelf: includeSelf},
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> descendants({
    bool? includeSelf = false,
    bool? reversed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #descendants,
          [],
          {
            #includeSelf: includeSelf,
            #reversed: reversed,
          },
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  bool propagateToChildren<T extends _i10.Component>(
    bool Function(T)? handler, {
    bool? includeSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #propagateToChildren,
          [handler],
          {#includeSelf: includeSelf},
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(_i10.Component? c) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [c],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onGameResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #onGameResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMount() => super.noSuchMethod(
        Invocation.method(
          #onMount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onParentResize(_i11.Vector2? maxSize) => super.noSuchMethod(
        Invocation.method(
          #onParentResize,
          [maxSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTree(double? dt) => super.noSuchMethod(
        Invocation.method(
          #updateTree,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChildrenChanged(
    _i10.Component? child,
    _i10.ChildrenChangeType? type,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChildrenChanged,
          [
            child,
            type,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FutureOr<void> add(_i10.Component? component) =>
      (super.noSuchMethod(Invocation.method(
        #add,
        [component],
      )) as _i4.FutureOr<void>);

  @override
  _i4.FutureOr<void> addToParent(_i10.Component? parent) =>
      (super.noSuchMethod(Invocation.method(
        #addToParent,
        [parent],
      )) as _i4.FutureOr<void>);

  @override
  _i4.Future<void> addAll(Iterable<_i10.Component>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [components],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void remove(_i10.Component? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromParent() => super.noSuchMethod(
        Invocation.method(
          #removeFromParent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(Iterable<_i10.Component>? components) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [components],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i10.Component)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i10.Component> componentsAtPoint(
    _i11.Vector2? point, [
    List<_i11.Vector2>? nestedPoints,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtPoint,
          [
            point,
            nestedPoints,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> componentsAtLocation<T>(
    T? locationContext,
    List<T>? nestedContexts,
    T? Function(
      _i10.CoordinateTransform,
      T,
    )? transformContext,
    bool Function(
      _i10.Component,
      T,
    )? checkContains,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtLocation,
          [
            locationContext,
            nestedContexts,
            transformContext,
            checkContains,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventAdd(_i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventAdd,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventRemove(
          _i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventRemove,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventMove(
          _i10.Component? newParent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventMove,
          [newParent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  void handleResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #handleResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoaded() => super.noSuchMethod(
        Invocation.method(
          #setLoaded,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMounted() => super.noSuchMethod(
        Invocation.method(
          #setMounted,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRemoved() => super.noSuchMethod(
        Invocation.method(
          #setRemoved,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TimeManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeManager extends _i1.Mock implements _i71.TimeManager {
  MockTimeManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get millisSinceEpoch => (super.noSuchMethod(
        Invocation.getter(#millisSinceEpoch),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [UrlLauncherWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherWrapper extends _i1.Mock
    implements _i72.UrlLauncherWrapper {
  MockUrlLauncherWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> launch(String? url) => (super.noSuchMethod(
        Invocation.method(
          #launch,
          [url],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [Viewport].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewport extends _i1.Mock implements _i73.Viewport {
  MockViewport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Transform2D get transform => (super.noSuchMethod(
        Invocation.getter(#transform),
        returnValue: _FakeTransform2D_58(
          this,
          Invocation.getter(#transform),
        ),
      ) as _i11.Transform2D);

  @override
  _i10.Anchor get anchor => (super.noSuchMethod(
        Invocation.getter(#anchor),
        returnValue: _FakeAnchor_62(
          this,
          Invocation.getter(#anchor),
        ),
      ) as _i10.Anchor);

  @override
  set anchor(_i10.Anchor? _anchor) => super.noSuchMethod(
        Invocation.setter(
          #anchor,
          _anchor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#position),
        ),
      ) as _i11.Vector2);

  @override
  set position(_i11.Vector2? value) => super.noSuchMethod(
        Invocation.setter(
          #position,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#size),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 get virtualSize => (super.noSuchMethod(
        Invocation.getter(#virtualSize),
        returnValue: _FakeVector2_12(
          this,
          Invocation.getter(#virtualSize),
        ),
      ) as _i11.Vector2);

  @override
  set size(_i11.Vector2? value) => super.noSuchMethod(
        Invocation.setter(
          #size,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.CameraComponent get camera => (super.noSuchMethod(
        Invocation.getter(#camera),
        returnValue: _FakeCameraComponent_11(
          this,
          Invocation.getter(#camera),
        ),
      ) as _i10.CameraComponent);

  @override
  bool get debugMode => (super.noSuchMethod(
        Invocation.getter(#debugMode),
        returnValue: false,
      ) as bool);

  @override
  set debugMode(bool? _debugMode) => super.noSuchMethod(
        Invocation.setter(
          #debugMode,
          _debugMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugCoordinatesPrecision(int? _debugCoordinatesPrecision) =>
      super.noSuchMethod(
        Invocation.setter(
          #debugCoordinatesPrecision,
          _debugCoordinatesPrecision,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Color get debugColor => (super.noSuchMethod(
        Invocation.getter(#debugColor),
        returnValue: _FakeColor_13(
          this,
          Invocation.getter(#debugColor),
        ),
      ) as _i8.Color);

  @override
  set debugColor(_i8.Color? _debugColor) => super.noSuchMethod(
        Invocation.setter(
          #debugColor,
          _debugColor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoaded => (super.noSuchMethod(
        Invocation.getter(#isLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounting => (super.noSuchMethod(
        Invocation.getter(#isMounting),
        returnValue: false,
      ) as bool);

  @override
  bool get isMounted => (super.noSuchMethod(
        Invocation.getter(#isMounted),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoving => (super.noSuchMethod(
        Invocation.getter(#isRemoving),
        returnValue: false,
      ) as bool);

  @override
  bool get isRemoved => (super.noSuchMethod(
        Invocation.getter(#isRemoved),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  set parent(_i10.Component? newParent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          newParent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.getter(#children),
        ),
      ) as _i10.ComponentSet);

  @override
  bool get hasChildren => (super.noSuchMethod(
        Invocation.getter(#hasChildren),
        returnValue: false,
      ) as bool);

  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
      ) as int);

  @override
  set priority(int? newPriority) => super.noSuchMethod(
        Invocation.setter(
          #priority,
          newPriority,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Paint get debugPaint => (super.noSuchMethod(
        Invocation.getter(#debugPaint),
        returnValue: _i32.dummyValue<_i8.Paint>(
          this,
          Invocation.getter(#debugPaint),
        ),
      ) as _i8.Paint);

  @override
  _i11.TextPaint get debugTextPaint => (super.noSuchMethod(
        Invocation.getter(#debugTextPaint),
        returnValue: _FakeTextPaint_15(
          this,
          Invocation.getter(#debugTextPaint),
        ),
      ) as _i11.TextPaint);

  @override
  void clip(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #clip,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsLocalPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsLocalPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onViewportResize() => super.noSuchMethod(
        Invocation.method(
          #onViewportResize,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Vector2 globalToLocal(
    _i11.Vector2? point, {
    _i11.Vector2? output,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #globalToLocal,
          [point],
          {#output: output},
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #globalToLocal,
            [point],
            {#output: output},
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 localToGlobal(
    _i11.Vector2? point, {
    _i11.Vector2? output,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #localToGlobal,
          [point],
          {#output: output},
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #localToGlobal,
            [point],
            {#output: output},
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 parentToLocal(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #parentToLocal,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #parentToLocal,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  _i11.Vector2 localToParent(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #localToParent,
          [point],
        ),
        returnValue: _FakeVector2_12(
          this,
          Invocation.method(
            #localToParent,
            [point],
          ),
        ),
      ) as _i11.Vector2);

  @override
  void transformCanvas(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #transformCanvas,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.ComponentSet createComponentSet() => (super.noSuchMethod(
        Invocation.method(
          #createComponentSet,
          [],
        ),
        returnValue: _FakeComponentSet_14(
          this,
          Invocation.method(
            #createComponentSet,
            [],
          ),
        ),
      ) as _i10.ComponentSet);

  @override
  T? findParent<T extends _i10.Component>({bool? includeSelf = false}) =>
      (super.noSuchMethod(Invocation.method(
        #findParent,
        [],
        {#includeSelf: includeSelf},
      )) as T?);

  @override
  Iterable<_i10.Component> ancestors({bool? includeSelf = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #ancestors,
          [],
          {#includeSelf: includeSelf},
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> descendants({
    bool? includeSelf = false,
    bool? reversed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #descendants,
          [],
          {
            #includeSelf: includeSelf,
            #reversed: reversed,
          },
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  bool propagateToChildren<T extends _i10.Component>(
    bool Function(T)? handler, {
    bool? includeSelf = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #propagateToChildren,
          [handler],
          {#includeSelf: includeSelf},
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(_i10.Component? c) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [c],
        ),
        returnValue: false,
      ) as bool);

  @override
  void onGameResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #onGameResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMount() => super.noSuchMethod(
        Invocation.method(
          #onMount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemove() => super.noSuchMethod(
        Invocation.method(
          #onRemove,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onParentResize(_i11.Vector2? maxSize) => super.noSuchMethod(
        Invocation.method(
          #onParentResize,
          [maxSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update(double? dt) => super.noSuchMethod(
        Invocation.method(
          #update,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTree(double? dt) => super.noSuchMethod(
        Invocation.method(
          #updateTree,
          [dt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChildrenChanged(
    _i10.Component? child,
    _i10.ChildrenChangeType? type,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChildrenChanged,
          [
            child,
            type,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void render(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #render,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderTree(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderTree,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FutureOr<void> add(_i10.Component? component) =>
      (super.noSuchMethod(Invocation.method(
        #add,
        [component],
      )) as _i4.FutureOr<void>);

  @override
  _i4.FutureOr<void> addToParent(_i10.Component? parent) =>
      (super.noSuchMethod(Invocation.method(
        #addToParent,
        [parent],
      )) as _i4.FutureOr<void>);

  @override
  _i4.Future<void> addAll(Iterable<_i10.Component>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [components],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void remove(_i10.Component? component) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromParent() => super.noSuchMethod(
        Invocation.method(
          #removeFromParent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(Iterable<_i10.Component>? components) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [components],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(_i10.Component)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsPoint(_i11.Vector2? point) => (super.noSuchMethod(
        Invocation.method(
          #containsPoint,
          [point],
        ),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i10.Component> componentsAtPoint(
    _i11.Vector2? point, [
    List<_i11.Vector2>? nestedPoints,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtPoint,
          [
            point,
            nestedPoints,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  Iterable<_i10.Component> componentsAtLocation<T>(
    T? locationContext,
    List<T>? nestedContexts,
    T? Function(
      _i10.CoordinateTransform,
      T,
    )? transformContext,
    bool Function(
      _i10.Component,
      T,
    )? checkContains,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsAtLocation,
          [
            locationContext,
            nestedContexts,
            transformContext,
            checkContains,
          ],
        ),
        returnValue: <_i10.Component>[],
      ) as Iterable<_i10.Component>);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventAdd(_i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventAdd,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventRemove(
          _i10.Component? parent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventRemove,
          [parent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  _i38.LifecycleEventStatus handleLifecycleEventMove(
          _i10.Component? newParent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLifecycleEventMove,
          [newParent],
        ),
        returnValue: _i38.LifecycleEventStatus.skip,
      ) as _i38.LifecycleEventStatus);

  @override
  void handleResize(_i11.Vector2? size) => super.noSuchMethod(
        Invocation.method(
          #handleResize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoaded() => super.noSuchMethod(
        Invocation.method(
          #setLoaded,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMounted() => super.noSuchMethod(
        Invocation.method(
          #setMounted,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRemoved() => super.noSuchMethod(
        Invocation.method(
          #setRemoved,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void renderDebugMode(_i8.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #renderDebugMode,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );
}
